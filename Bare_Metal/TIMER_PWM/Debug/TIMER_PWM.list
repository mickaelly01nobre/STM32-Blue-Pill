
TIMER_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b8  080004b8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b8  080004b8  000014b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004c0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004c4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004c4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006b8  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a0  00000000  00000000  000026e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00002888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff36  00000000  00000000  00002919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000063d  00000000  00000000  0001284f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005482f  00000000  00000000  00012e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000676bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  00067700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000677a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080004a0 	.word	0x080004a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080004a0 	.word	0x080004a0

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <TIM3_IRQHandler>:
volatile uint8_t timerInterruptFlag = 0;
volatile uint8_t increasing = 1;  // Flag para indicar se o duty cycle está aumentando ou diminuindo
volatile uint16_t pwmValue = 0;   // Valor atual do PWM

void TIM3_IRQHandler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF)
 80001ac:	4b09      	ldr	r3, [pc, #36]	@ (80001d4 <TIM3_IRQHandler+0x2c>)
 80001ae:	691b      	ldr	r3, [r3, #16]
 80001b0:	f003 0301 	and.w	r3, r3, #1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d008      	beq.n	80001ca <TIM3_IRQHandler+0x22>
    {
        TIM3->SR &= ~TIM_SR_UIF;
 80001b8:	4b06      	ldr	r3, [pc, #24]	@ (80001d4 <TIM3_IRQHandler+0x2c>)
 80001ba:	691b      	ldr	r3, [r3, #16]
 80001bc:	4a05      	ldr	r2, [pc, #20]	@ (80001d4 <TIM3_IRQHandler+0x2c>)
 80001be:	f023 0301 	bic.w	r3, r3, #1
 80001c2:	6113      	str	r3, [r2, #16]

        // Define a flag de interrupção
        timerInterruptFlag = 1;
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <TIM3_IRQHandler+0x30>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	701a      	strb	r2, [r3, #0]
    }
}
 80001ca:	bf00      	nop
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	40000400 	.word	0x40000400
 80001d8:	20000020 	.word	0x20000020

080001dc <main>:

int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	 * Clock dos Perifericos
	 */

	//habilite para usa o GPIO clock

	RCC->APB2ENR |= (1 << 2);
 80001e2:	4b81      	ldr	r3, [pc, #516]	@ (80003e8 <main+0x20c>)
 80001e4:	699b      	ldr	r3, [r3, #24]
 80001e6:	4a80      	ldr	r2, [pc, #512]	@ (80003e8 <main+0x20c>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	6193      	str	r3, [r2, #24]
		 *
	*/
	// OUTPUT

	/*Configure PA0 as Output Alternate Push/Pull */
	GPIOA->CRL|=GPIO_CRL_MODE0;
 80001ee:	4b7f      	ldr	r3, [pc, #508]	@ (80003ec <main+0x210>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a7e      	ldr	r2, [pc, #504]	@ (80003ec <main+0x210>)
 80001f4:	f043 0303 	orr.w	r3, r3, #3
 80001f8:	6013      	str	r3, [r2, #0]
	GPIOA->CRL|=(GPIO_CRL_CNF0_1);
 80001fa:	4b7c      	ldr	r3, [pc, #496]	@ (80003ec <main+0x210>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a7b      	ldr	r2, [pc, #492]	@ (80003ec <main+0x210>)
 8000200:	f043 0308 	orr.w	r3, r3, #8
 8000204:	6013      	str	r3, [r2, #0]
	GPIOA->CRL&=~(GPIO_CRL_CNF0_0);
 8000206:	4b79      	ldr	r3, [pc, #484]	@ (80003ec <main+0x210>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a78      	ldr	r2, [pc, #480]	@ (80003ec <main+0x210>)
 800020c:	f023 0304 	bic.w	r3, r3, #4
 8000210:	6013      	str	r3, [r2, #0]

	// PA1
	GPIOA->CRL |= GPIO_CRL_MODE1;
 8000212:	4b76      	ldr	r3, [pc, #472]	@ (80003ec <main+0x210>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a75      	ldr	r2, [pc, #468]	@ (80003ec <main+0x210>)
 8000218:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800021c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (GPIO_CRL_CNF1_1);
 800021e:	4b73      	ldr	r3, [pc, #460]	@ (80003ec <main+0x210>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a72      	ldr	r2, [pc, #456]	@ (80003ec <main+0x210>)
 8000224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000228:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF1_0);
 800022a:	4b70      	ldr	r3, [pc, #448]	@ (80003ec <main+0x210>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a6f      	ldr	r2, [pc, #444]	@ (80003ec <main+0x210>)
 8000230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000234:	6013      	str	r3, [r2, #0]

	// PA2
	GPIOA->CRL |= GPIO_CRL_MODE2;
 8000236:	4b6d      	ldr	r3, [pc, #436]	@ (80003ec <main+0x210>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a6c      	ldr	r2, [pc, #432]	@ (80003ec <main+0x210>)
 800023c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000240:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (GPIO_CRL_CNF2_1);
 8000242:	4b6a      	ldr	r3, [pc, #424]	@ (80003ec <main+0x210>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a69      	ldr	r2, [pc, #420]	@ (80003ec <main+0x210>)
 8000248:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800024c:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF2_0);
 800024e:	4b67      	ldr	r3, [pc, #412]	@ (80003ec <main+0x210>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a66      	ldr	r2, [pc, #408]	@ (80003ec <main+0x210>)
 8000254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000258:	6013      	str	r3, [r2, #0]
 * *****************************************************************************************************************
 * */
	/*Configure AF*/

	// Set Bit 0 to enable AF clock
	RCC->APB2ENR |= (1 << 0);
 800025a:	4b63      	ldr	r3, [pc, #396]	@ (80003e8 <main+0x20c>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a62      	ldr	r2, [pc, #392]	@ (80003e8 <main+0x20c>)
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	6193      	str	r3, [r2, #24]
	/*Don't remap the pin*/
	AFIO->MAPR&=~AFIO_MAPR_TIM2_REMAP;
 8000266:	4b62      	ldr	r3, [pc, #392]	@ (80003f0 <main+0x214>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a61      	ldr	r2, [pc, #388]	@ (80003f0 <main+0x214>)
 800026c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000270:	6053      	str	r3, [r2, #4]


	/*Configure timer2*/

	// Enable clock access to timer2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000272:	4b5d      	ldr	r3, [pc, #372]	@ (80003e8 <main+0x20c>)
 8000274:	69db      	ldr	r3, [r3, #28]
 8000276:	4a5c      	ldr	r2, [pc, #368]	@ (80003e8 <main+0x20c>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	61d3      	str	r3, [r2, #28]



	//Define o prescaler como 0, ou seja, o temporizador sera incrementado a cada ciclo de clock.
	TIM2->PSC = 0;
 800027e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000282:	2200      	movs	r2, #0
 8000284:	629a      	str	r2, [r3, #40]	@ 0x28
	// tempo total para um ciclo completo do PWM
	TIM2->ARR = 100;
 8000286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028a:	2264      	movs	r2, #100	@ 0x64
 800028c:	62da      	str	r2, [r3, #44]	@ 0x2c
 * 	 	TIMx_CCMRx. O registro de pré-carga é uma memória temporária que armazena os valores que serão usados na próxima
 * 	 	atualização do sinal PWM.
 *
 * 	OBSERVACAO: O CCMR2 usado nesse codigo tem 4 canais
 **/
	TIM2->CCMR1 |=TIM_CCMR1_OC1M_2|TIM_CCMR1_OC1M_1; // PA0
 800028e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000298:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800029c:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=TIM_CCMR1_OC2M_2|TIM_CCMR1_OC2M_1; // PA1
 800029e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a8:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80002ac:	6193      	str	r3, [r2, #24]
	TIM2->CCMR2 |=TIM_CCMR2_OC3M_2|TIM_CCMR2_OC3M_1; // PA2
 80002ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002bc:	61d3      	str	r3, [r2, #28]
 *
 *  -	 Configurar esse registrador ativa a saída OCx, permitindo que o sinal PWM gerado pelo temporizador seja
 * 		 enviado para o pino de saída correspondente.
 * 		 // Ativa a saída para o canal 4 (PB11) do PWM (TIM_CCER_CC4E).
 **/
	TIM2->CCER  |= TIM_CCER_CC1E;
 80002be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6213      	str	r3, [r2, #32]
	TIM2->CCER  |= TIM_CCER_CC2E;
 80002ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d8:	f043 0310 	orr.w	r3, r3, #16
 80002dc:	6213      	str	r3, [r2, #32]
	TIM2->CCER  |= TIM_CCER_CC3E;
 80002de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ec:	6213      	str	r3, [r2, #32]
	// Contador
	// Habilita o contador colocando 1 na posicao 0 . Dessa forma:  (0x1UL << (0U))
	TIM2->CR1   |= TIM_CR1_CEN;
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6013      	str	r3, [r2, #0]
	 * 											  	TIM3
	 * *****************************************************************************************************************
	 * */

    // Habilita o clock para o Timer3
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80002fe:	4b3a      	ldr	r3, [pc, #232]	@ (80003e8 <main+0x20c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a39      	ldr	r2, [pc, #228]	@ (80003e8 <main+0x20c>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	61d3      	str	r3, [r2, #28]

    // Configura o Timer3
    TIM3->PSC = 8000 - 1;  // Prescaler para 1 ms
 800030a:	4b3a      	ldr	r3, [pc, #232]	@ (80003f4 <main+0x218>)
 800030c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000310:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = BLINK_INTERVAL_MS - 1; // Período de 500 ms
 8000312:	4b38      	ldr	r3, [pc, #224]	@ (80003f4 <main+0x218>)
 8000314:	2209      	movs	r2, #9
 8000316:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Habilita a interrupção de atualização (UIE) do Timer3
    TIM3->DIER |= TIM_DIER_UIE;
 8000318:	4b36      	ldr	r3, [pc, #216]	@ (80003f4 <main+0x218>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a35      	ldr	r2, [pc, #212]	@ (80003f4 <main+0x218>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	60d3      	str	r3, [r2, #12]

    // Habilita a interrupção do Timer3 no NVIC
    NVIC_EnableIRQ(TIM3_IRQn);
 8000324:	201d      	movs	r0, #29
 8000326:	f7ff ff23 	bl	8000170 <__NVIC_EnableIRQ>

    // Inicia o Timer2
    TIM3->CR1 |= TIM_CR1_CEN;
 800032a:	4b32      	ldr	r3, [pc, #200]	@ (80003f4 <main+0x218>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a31      	ldr	r2, [pc, #196]	@ (80003f4 <main+0x218>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6013      	str	r3, [r2, #0]

    int ledIndex = 0;  // Variável para controlar qual LED está ativo
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]

    while(1)
    {
        if (timerInterruptFlag)
 800033a:	4b2f      	ldr	r3, [pc, #188]	@ (80003f8 <main+0x21c>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0fa      	beq.n	800033a <main+0x15e>
        {
            timerInterruptFlag = 0;
 8000344:	4b2c      	ldr	r3, [pc, #176]	@ (80003f8 <main+0x21c>)
 8000346:	2200      	movs	r2, #0
 8000348:	701a      	strb	r2, [r3, #0]

            // Controle do PWM para o LED atual
            if (increasing)
 800034a:	4b2c      	ldr	r3, [pc, #176]	@ (80003fc <main+0x220>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d00f      	beq.n	8000374 <main+0x198>
            {
                pwmValue++;
 8000354:	4b2a      	ldr	r3, [pc, #168]	@ (8000400 <main+0x224>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	b29b      	uxth	r3, r3
 800035a:	3301      	adds	r3, #1
 800035c:	b29a      	uxth	r2, r3
 800035e:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <main+0x224>)
 8000360:	801a      	strh	r2, [r3, #0]
                if (pwmValue >= 100)
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <main+0x224>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	b29b      	uxth	r3, r3
 8000368:	2b63      	cmp	r3, #99	@ 0x63
 800036a:	d91a      	bls.n	80003a2 <main+0x1c6>
                {
                    increasing = 0;
 800036c:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <main+0x220>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	e016      	b.n	80003a2 <main+0x1c6>
                }
            }
            else
            {
                pwmValue--;
 8000374:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <main+0x224>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	b29b      	uxth	r3, r3
 800037a:	3b01      	subs	r3, #1
 800037c:	b29a      	uxth	r2, r3
 800037e:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <main+0x224>)
 8000380:	801a      	strh	r2, [r3, #0]
                if (pwmValue == 0)
 8000382:	4b1f      	ldr	r3, [pc, #124]	@ (8000400 <main+0x224>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	b29b      	uxth	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10a      	bne.n	80003a2 <main+0x1c6>
                {
                    increasing = 1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <main+0x220>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]

                    // Avança para o próximo LED na sequência
                    ledIndex++;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3301      	adds	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
                    if (ledIndex > 2)  // Existem 3 LEDs, índice de 0 a 2
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b02      	cmp	r3, #2
 800039c:	dd01      	ble.n	80003a2 <main+0x1c6>
                    {
                        ledIndex = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	607b      	str	r3, [r7, #4]
                    }
                }
            }

            // Atualiza o PWM apenas para o LED atual
            switch (ledIndex)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d017      	beq.n	80003d8 <main+0x1fc>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	dcc5      	bgt.n	800033a <main+0x15e>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d003      	beq.n	80003bc <main+0x1e0>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d007      	beq.n	80003ca <main+0x1ee>
 80003ba:	e014      	b.n	80003e6 <main+0x20a>
            {
                case 0:
                    TIM2->CCR1 = pwmValue;
 80003bc:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <main+0x224>)
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	b29a      	uxth	r2, r3
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c6:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 80003c8:	e00d      	b.n	80003e6 <main+0x20a>
                case 1:
                    TIM2->CCR2 = pwmValue;
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <main+0x224>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d4:	639a      	str	r2, [r3, #56]	@ 0x38
                    break;
 80003d6:	e006      	b.n	80003e6 <main+0x20a>
                case 2:
                    TIM2->CCR3 = pwmValue;
 80003d8:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <main+0x224>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e2:	63da      	str	r2, [r3, #60]	@ 0x3c
                    break;
 80003e4:	bf00      	nop
        if (timerInterruptFlag)
 80003e6:	e7a8      	b.n	800033a <main+0x15e>
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010800 	.word	0x40010800
 80003f0:	40010000 	.word	0x40010000
 80003f4:	40000400 	.word	0x40000400
 80003f8:	20000020 	.word	0x20000020
 80003fc:	20000000 	.word	0x20000000
 8000400:	20000022 	.word	0x20000022

08000404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000404:	480d      	ldr	r0, [pc, #52]	@ (800043c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000406:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000408:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	@ (8000440 <LoopForever+0x6>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	@ (8000444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	@ (8000448 <LoopForever+0xe>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	@ (800044c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	@ (8000450 <LoopForever+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000432:	f000 f811 	bl	8000458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000436:	f7ff fed1 	bl	80001dc <main>

0800043a <LoopForever>:

LoopForever:
  b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>
  ldr   r0, =_estack
 800043c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000448:	080004c0 	.word	0x080004c0
  ldr r2, =_sbss
 800044c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000450:	20000024 	.word	0x20000024

08000454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC1_2_IRQHandler>
	...

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	2600      	movs	r6, #0
 800045c:	4d0c      	ldr	r5, [pc, #48]	@ (8000490 <__libc_init_array+0x38>)
 800045e:	4c0d      	ldr	r4, [pc, #52]	@ (8000494 <__libc_init_array+0x3c>)
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	10a4      	asrs	r4, r4, #2
 8000464:	42a6      	cmp	r6, r4
 8000466:	d109      	bne.n	800047c <__libc_init_array+0x24>
 8000468:	f000 f81a 	bl	80004a0 <_init>
 800046c:	2600      	movs	r6, #0
 800046e:	4d0a      	ldr	r5, [pc, #40]	@ (8000498 <__libc_init_array+0x40>)
 8000470:	4c0a      	ldr	r4, [pc, #40]	@ (800049c <__libc_init_array+0x44>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	42a6      	cmp	r6, r4
 8000478:	d105      	bne.n	8000486 <__libc_init_array+0x2e>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000480:	4798      	blx	r3
 8000482:	3601      	adds	r6, #1
 8000484:	e7ee      	b.n	8000464 <__libc_init_array+0xc>
 8000486:	f855 3b04 	ldr.w	r3, [r5], #4
 800048a:	4798      	blx	r3
 800048c:	3601      	adds	r6, #1
 800048e:	e7f2      	b.n	8000476 <__libc_init_array+0x1e>
 8000490:	080004b8 	.word	0x080004b8
 8000494:	080004b8 	.word	0x080004b8
 8000498:	080004b8 	.word	0x080004b8
 800049c:	080004bc 	.word	0x080004bc

080004a0 <_init>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr

080004ac <_fini>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr
