
DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001760  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08001890  08001890  00011890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a34  08001a34  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001a34  08001a34  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a34  08001a34  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a34  08001a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a38  08001a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  08001aa0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001aa0  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001186  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000612  00000000  00000000  00021213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00021828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001203c  00000000  00000000  00021b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002719  00000000  00000000  00033b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059c8e  00000000  00000000  00036275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008ff03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fb8  00000000  00000000  0008ff54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08001878 	.word	0x08001878

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08001878 	.word	0x08001878

08000170 <i2c_init>:
 * ajustando também o tempo de subida (TRISE) e os registros de controle do I2C (CCR e CR1).
 *
 * */

void i2c_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Habilita o GPIOB*/
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8000174:	4b24      	ldr	r3, [pc, #144]	; (8000208 <i2c_init+0x98>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a23      	ldr	r2, [pc, #140]	; (8000208 <i2c_init+0x98>)
 800017a:	f043 0308 	orr.w	r3, r3, #8
 800017e:	6193      	str	r3, [r2, #24]

	/*habilitia o PB6 como output 50MHz*/
	// SDL
	GPIOB->CRL|=GPIO_CRL_MODE6;
 8000180:	4b22      	ldr	r3, [pc, #136]	; (800020c <i2c_init+0x9c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a21      	ldr	r2, [pc, #132]	; (800020c <i2c_init+0x9c>)
 8000186:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800018a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=GPIO_CRL_CNF6;
 800018c:	4b1f      	ldr	r3, [pc, #124]	; (800020c <i2c_init+0x9c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1e      	ldr	r2, [pc, #120]	; (800020c <i2c_init+0x9c>)
 8000192:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000196:	6013      	str	r3, [r2, #0]

	/*Habilita PB7 para output 50MHz*/
	// SDA
	GPIOB->CRL|=GPIO_CRL_MODE7;
 8000198:	4b1c      	ldr	r3, [pc, #112]	; (800020c <i2c_init+0x9c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a1b      	ldr	r2, [pc, #108]	; (800020c <i2c_init+0x9c>)
 800019e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=GPIO_CRL_CNF7;
 80001a4:	4b19      	ldr	r3, [pc, #100]	; (800020c <i2c_init+0x9c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a18      	ldr	r2, [pc, #96]	; (800020c <i2c_init+0x9c>)
 80001aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80001ae:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 80001b0:	4b15      	ldr	r3, [pc, #84]	; (8000208 <i2c_init+0x98>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a14      	ldr	r2, [pc, #80]	; (8000208 <i2c_init+0x98>)
 80001b6:	f043 0301 	orr.w	r3, r3, #1
 80001ba:	6193      	str	r3, [r2, #24]

	/*Habilita o clock  I2C1*/
	RCC->APB1ENR|=RCC_APB1ENR_I2C1EN;
 80001bc:	4b12      	ldr	r3, [pc, #72]	; (8000208 <i2c_init+0x98>)
 80001be:	69db      	ldr	r3, [r3, #28]
 80001c0:	4a11      	ldr	r2, [pc, #68]	; (8000208 <i2c_init+0x98>)
 80001c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001c6:	61d3      	str	r3, [r2, #28]


	/*Chama o periferico com o  clock is 8MHz*/
	I2C1->CR2&=~(I2C_CR2_FREQ);
 80001c8:	4b11      	ldr	r3, [pc, #68]	; (8000210 <i2c_init+0xa0>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	4a10      	ldr	r2, [pc, #64]	; (8000210 <i2c_init+0xa0>)
 80001ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80001d2:	6053      	str	r3, [r2, #4]
	I2C1->CR2|=(8<<I2C_CR2_FREQ_Pos);
 80001d4:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <i2c_init+0xa0>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	4a0d      	ldr	r2, [pc, #52]	; (8000210 <i2c_init+0xa0>)
 80001da:	f043 0308 	orr.w	r3, r3, #8
 80001de:	6053      	str	r3, [r2, #4]
	// habilita o rise time*/
	I2C1->TRISE=9;
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <i2c_init+0xa0>)
 80001e2:	2209      	movs	r2, #9
 80001e4:	621a      	str	r2, [r3, #32]

	I2C1->CCR|=0x28;
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <i2c_init+0xa0>)
 80001e8:	69db      	ldr	r3, [r3, #28]
 80001ea:	4a09      	ldr	r2, [pc, #36]	; (8000210 <i2c_init+0xa0>)
 80001ec:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80001f0:	61d3      	str	r3, [r2, #28]

	I2C1->CR1|=I2C_CR1_PE;
 80001f2:	4b07      	ldr	r3, [pc, #28]	; (8000210 <i2c_init+0xa0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a06      	ldr	r2, [pc, #24]	; (8000210 <i2c_init+0xa0>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6013      	str	r3, [r2, #0]
}
 80001fe:	bf00      	nop
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000
 800020c:	40010c00 	.word	0x40010c00
 8000210:	40005400 	.word	0x40005400

08000214 <delay>:


static void delay(uint32_t delay)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	for (volatile int i=0;i<1000;i++);
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	e002      	b.n	8000228 <delay+0x14>
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	3301      	adds	r3, #1
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800022e:	dbf8      	blt.n	8000222 <delay+0xe>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <i2c1_scan_bus>:
 * Esta função varre os endereços do barramento I2C (0 a 127) para encontrar dispositivos conectados. Ela envia um "start condition"
 * , transmite o endereço do dispositivo e verifica se houve resposta, indicando que um dispositivo está presente nesse endereço.
 * Se encontrado, o endereço do dispositivo é impresso via printf().
 * */
void i2c1_scan_bus(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	int a=0;
 8000242:	2300      	movs	r3, #0
 8000244:	603b      	str	r3, [r7, #0]
	for (uint8_t i=0;i<128;i++)
 8000246:	2300      	movs	r3, #0
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	e03d      	b.n	80002c8 <i2c1_scan_bus+0x8c>
	{
		I2C1->CR1 |= I2C_CR1_START;
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <i2c1_scan_bus+0xa0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a22      	ldr	r2, [pc, #136]	; (80002dc <i2c1_scan_bus+0xa0>)
 8000252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000256:	6013      	str	r3, [r2, #0]
		while(!(I2C1->SR1 & I2C_SR1_SB));
 8000258:	bf00      	nop
 800025a:	4b20      	ldr	r3, [pc, #128]	; (80002dc <i2c1_scan_bus+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0301 	and.w	r3, r3, #1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <i2c1_scan_bus+0x1e>
		I2C1->DR=(i<<1|0);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	005a      	lsls	r2, r3, #1
 800026a:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <i2c1_scan_bus+0xa0>)
 800026c:	611a      	str	r2, [r3, #16]
		while(!(I2C1->SR1)|!(I2C1->SR2)){};
 800026e:	bf00      	nop
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <i2c1_scan_bus+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	2b00      	cmp	r3, #0
 8000276:	bf0c      	ite	eq
 8000278:	2301      	moveq	r3, #1
 800027a:	2300      	movne	r3, #0
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <i2c1_scan_bus+0xa0>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	2b00      	cmp	r3, #0
 8000284:	bf0c      	ite	eq
 8000286:	2301      	moveq	r3, #1
 8000288:	2300      	movne	r3, #0
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4313      	orrs	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1ed      	bne.n	8000270 <i2c1_scan_bus+0x34>
		I2C1->CR1 |= I2C_CR1_STOP;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <i2c1_scan_bus+0xa0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <i2c1_scan_bus+0xa0>)
 800029a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800029e:	6013      	str	r3, [r2, #0]
		delay(100);      //o minimo de espera é 40 uS, mas é interessante deixar 100uS
 80002a0:	2064      	movs	r0, #100	; 0x64
 80002a2:	f7ff ffb7 	bl	8000214 <delay>
		a=(I2C1->SR1&I2C_SR1_ADDR);
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <i2c1_scan_bus+0xa0>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f003 0302 	and.w	r3, r3, #2
 80002ae:	603b      	str	r3, [r7, #0]
		if (a==2)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	d105      	bne.n	80002c2 <i2c1_scan_bus+0x86>
		{
			printf("Found I2C device at address 0x%X (hexadecimal), or %d (decimal)\r\n",i,i);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	79fa      	ldrb	r2, [r7, #7]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <i2c1_scan_bus+0xa4>)
 80002be:	f000 fa95 	bl	80007ec <iprintf>
	for (uint8_t i=0;i<128;i++)
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	3301      	adds	r3, #1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	dabd      	bge.n	800024c <i2c1_scan_bus+0x10>
		}
	}
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40005400 	.word	0x40005400
 80002e0:	08001890 	.word	0x08001890

080002e4 <i2c1_readMemoryMulti>:
 * 	- Comprimento do buffer;
 *
 * */

void i2c1_readMemoryMulti(uint8_t saddr,uint8_t maddr, uint8_t *data, uint8_t length)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	603a      	str	r2, [r7, #0]
 80002ec:	461a      	mov	r2, r3
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	460b      	mov	r3, r1
 80002f4:	71bb      	strb	r3, [r7, #6]
 80002f6:	4613      	mov	r3, r2
 80002f8:	717b      	strb	r3, [r7, #5]
	// 26.6.7 I2C Status register 1 (I2C_SR2)
	// Dentro da função, começamos esperando até que o barramento esteja livre pelo bit pronto e ocupado do registrador SR1
	while (I2C1->SR2 & I2C_SR2_BUSY){;} // (Habilita o bit 1 "busy")
 80002fa:	bf00      	nop
 80002fc:	4b45      	ldr	r3, [pc, #276]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0302 	and.w	r3, r3, #2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f9      	bne.n	80002fc <i2c1_readMemoryMulti+0x18>

	//26.6.1 I2C Control register 1 (I2C_CR1)
	I2C1->CR1|=I2C_CR1_START; // Após o barramento ser liberado, envie a condição de início definindo o bit start em CR1 como 1,
 8000308:	4b42      	ldr	r3, [pc, #264]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a41      	ldr	r2, [pc, #260]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 800030e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000312:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB)){;} //  Aguarde até que a condição inicial seja gerada
 8000314:	bf00      	nop
 8000316:	4b3f      	ldr	r3, [pc, #252]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <i2c1_readMemoryMulti+0x32>
	I2C1->DR=saddr<<1; //  envie o endereço do escravo deslocado para a esquerda em 1 bit
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	005a      	lsls	r2, r3, #1
 8000326:	4b3b      	ldr	r3, [pc, #236]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000328:	611a      	str	r2, [r3, #16]

	//26.6.6 I2C Status register 1 (I2C_SR1)
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){;} // Aguarde até que o endereço seja correspondido verificando o bit ADDR no registro SR1
 800032a:	bf00      	nop
 800032c:	4b39      	ldr	r3, [pc, #228]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <i2c1_readMemoryMulti+0x48>
	(void)I2C1->SR2; // Limpar registro SR2
 8000338:	4b36      	ldr	r3, [pc, #216]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 800033a:	699b      	ldr	r3, [r3, #24]

	//26.6.6 I2C Status register 1 (I2C_SR1)
	while(!(I2C1->SR1&I2C_SR1_TXE)){;}// Aguarde até que o buffer de transmissão esteja vazio verificando o bit TXE no registro SR1
 800033c:	bf00      	nop
 800033e:	4b35      	ldr	r3, [pc, #212]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <i2c1_readMemoryMulti+0x5a>
	I2C1->DR = maddr; // Envie o endereço de memória
 800034a:	4a32      	ldr	r2, [pc, #200]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1&I2C_SR1_TXE)){;}// Aguarde até que o buffer de transmissão esteja vazio
 8000350:	bf00      	nop
 8000352:	4b30      	ldr	r3, [pc, #192]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <i2c1_readMemoryMulti+0x6e>

	/* Para mudar a direção de gravação para leitura, precisamos enviar a condição de reinicialização seguida do envio do endereço
	 * do escravo no modo de leitura.
	 *
	 * */
	I2C1->CR1|=I2C_CR1_START; // Para gerar a condição de reinicialização, gere outra condição de início
 800035e:	4b2d      	ldr	r3, [pc, #180]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a2c      	ldr	r2, [pc, #176]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000368:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB)){;} // Aguarde até que a condição inicial seja gerada
 800036a:	bf00      	nop
 800036c:	4b29      	ldr	r3, [pc, #164]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <i2c1_readMemoryMulti+0x88>
	I2C1->DR=saddr<<1|1;  // envie o endereço salve com a operação de leitura
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	f043 0201 	orr.w	r2, r3, #1
 8000380:	4b24      	ldr	r3, [pc, #144]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000382:	611a      	str	r2, [r3, #16]
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){;} // Aguarde até que o endereço seja correspondido
 8000384:	bf00      	nop
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f003 0302 	and.w	r3, r3, #2
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f9      	beq.n	8000386 <i2c1_readMemoryMulti+0xa2>
	(void)I2C1->SR2; // Limpar registro SR2
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000394:	699b      	ldr	r3, [r3, #24]
	// 26.6.1 I2C Control register 1 (I2C_CR1)
	/* Esse bit controla se o dispositivo enviará um sinal de reconhecimento (ACK) depois de receber um byte de dados ou endereço
	 * válido. Se estiver em 1, o dispositivo envia o ACK, indicando que recebeu os dados corretamente. Se estiver em 0, ele não
	 * envia o ACK, o que pode ser usado para indicar que o dado não foi aceito.
	 * */
	I2C1->CR1|=I2C_CR1_ACK; // Habilitar reconhecimento no registro CR1
 8000396:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 800039c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003a0:	6013      	str	r3, [r2, #0]
	while(length>0U) // Caso tenhamos apenas um byte restante, devemos fazer o seguinte
 80003a2:	e02e      	b.n	8000402 <i2c1_readMemoryMulti+0x11e>
	{
		if(length==1U)
 80003a4:	797b      	ldrb	r3, [r7, #5]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d11a      	bne.n	80003e0 <i2c1_readMemoryMulti+0xfc>
		{
			I2C1->CR1&=~I2C_CR1_ACK; // Desabilitar reconhecimento
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a19      	ldr	r2, [pc, #100]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003b4:	6013      	str	r3, [r2, #0]
			I2C1->CR1|=I2C_CR1_STOP; // Gerar parada
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c0:	6013      	str	r3, [r2, #0]
			while(!(I2C1->SR1&I2C_SR1_RXNE)){;} // Aguarde até que o bit de recebimento seja definido
 80003c2:	bf00      	nop
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f9      	beq.n	80003c4 <i2c1_readMemoryMulti+0xe0>
			*data++=I2C1->DR; // Armazena o último byte recebido no buffer
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003d2:	6919      	ldr	r1, [r3, #16]
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	603a      	str	r2, [r7, #0]
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
			break;
 80003de:	e014      	b.n	800040a <i2c1_readMemoryMulti+0x126>
		}
		else
		{
			while(!(I2C1->SR1&I2C_SR1_RXNE)){;} // Aguarde até que o bit de recebimento seja definido
 80003e0:	bf00      	nop
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f9      	beq.n	80003e2 <i2c1_readMemoryMulti+0xfe>
			(*data++)=I2C1->DR; // armazenar os dados no buffer e incrementar o contador de buffer
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <i2c1_readMemoryMulti+0x130>)
 80003f0:	6919      	ldr	r1, [r3, #16]
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	603a      	str	r2, [r7, #0]
 80003f8:	b2ca      	uxtb	r2, r1
 80003fa:	701a      	strb	r2, [r3, #0]
			length--; // decrementar o contador
 80003fc:	797b      	ldrb	r3, [r7, #5]
 80003fe:	3b01      	subs	r3, #1
 8000400:	717b      	strb	r3, [r7, #5]
	while(length>0U) // Caso tenhamos apenas um byte restante, devemos fazer o seguinte
 8000402:	797b      	ldrb	r3, [r7, #5]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d1cd      	bne.n	80003a4 <i2c1_readMemoryMulti+0xc0>
		}


	}

}
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40005400 	.word	0x40005400

08000418 <bcd_to_decimal>:
 * (por exemplo, 25 é 0010 0101). Funções BCD são necessárias para converter os valores entre BCD e binário,
 * facilitando cálculos e exibições dos dados de tempo.
 *
 * */

int bcd_to_decimal(unsigned char x) {
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
    return x - 6 * (x >> 4);
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	091b      	lsrs	r3, r3, #4
 8000428:	b2db      	uxtb	r3, r3
 800042a:	4619      	mov	r1, r3
 800042c:	460b      	mov	r3, r1
 800042e:	0089      	lsls	r1, r1, #2
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	4413      	add	r3, r2
}
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <main>:



int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	uart2_init();
 8000446:	f000 f91f 	bl	8000688 <uart2_init>
	i2c_init();
 800044a:	f7ff fe91 	bl	8000170 <i2c_init>
	i2c1_scan_bus();
 800044e:	f7ff fef5 	bl	800023c <i2c1_scan_bus>
	// Inicializa a semente do gerador de números aleatórios com valor fixo.
	srand(1);
 8000452:	2001      	movs	r0, #1
 8000454:	f000 f9e2 	bl	800081c <srand>
	while(1)
	{
		/* Le os valores de horas, minutos e segundos do DS3231 (endereço 0x68), começando no registrador 0x00
		 * e armazena esses valores em rtc_data. O valor 3 indica que três bytes (segundos, minutos e horas) são lidos.
		 */
		i2c1_readMemoryMulti((uint8_t)0x68,(uint8_t)0x00,rtc_data,(uint8_t)3);
 8000458:	2303      	movs	r3, #3
 800045a:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <main+0x78>)
 800045c:	2100      	movs	r1, #0
 800045e:	2068      	movs	r0, #104	; 0x68
 8000460:	f7ff ff40 	bl	80002e4 <i2c1_readMemoryMulti>
		for (uint8_t i=0;i<3;i++)
 8000464:	2300      	movs	r3, #0
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	e00d      	b.n	8000486 <main+0x46>
		{
			rtc_data[i]=bcd_to_decimal(rtc_data[i]);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <main+0x78>)
 800046e:	5cd3      	ldrb	r3, [r2, r3]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffd1 	bl	8000418 <bcd_to_decimal>
 8000476:	4602      	mov	r2, r0
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	b2d1      	uxtb	r1, r2
 800047c:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <main+0x78>)
 800047e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0;i<3;i++)
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	3301      	adds	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d9ee      	bls.n	800046a <main+0x2a>
			uint8_t data_s[3]={0,rand()%20,rand()%10};
			i2c1_writeMemoryMulti(0x68,0x00,data_s,3);
		}
		*/

		printf("RTC time is: %d:%d:%d\r\n", rtc_data[2],rtc_data[1],rtc_data[0]);
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <main+0x78>)
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	4619      	mov	r1, r3
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <main+0x78>)
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	461a      	mov	r2, r3
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <main+0x78>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	4807      	ldr	r0, [pc, #28]	; (80004bc <main+0x7c>)
 800049e:	f000 f9a5 	bl	80007ec <iprintf>
		for (int i=0;i<100000;i++);
 80004a2:	2300      	movs	r3, #0
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	e002      	b.n	80004ae <main+0x6e>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	4a03      	ldr	r2, [pc, #12]	; (80004c0 <main+0x80>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	ddf8      	ble.n	80004a8 <main+0x68>
		i2c1_readMemoryMulti((uint8_t)0x68,(uint8_t)0x00,rtc_data,(uint8_t)3);
 80004b6:	e7cf      	b.n	8000458 <main+0x18>
 80004b8:	20000080 	.word	0x20000080
 80004bc:	080018d4 	.word	0x080018d4
 80004c0:	0001869f 	.word	0x0001869f

080004c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return 1;
 80004c8:	2301      	movs	r3, #1
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <_kill>:

int _kill(int pid, int sig)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
 80004da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80004dc:	f000 f954 	bl	8000788 <__errno>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2216      	movs	r2, #22
 80004e4:	601a      	str	r2, [r3, #0]
  return -1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <_exit>:

void _exit (int status)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80004fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f7ff ffe7 	bl	80004d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000504:	e7fe      	b.n	8000504 <_exit+0x12>

08000506 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b086      	sub	sp, #24
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	e00a      	b.n	800052e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000518:	f3af 8000 	nop.w
 800051c:	4601      	mov	r1, r0
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	60ba      	str	r2, [r7, #8]
 8000524:	b2ca      	uxtb	r2, r1
 8000526:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	3301      	adds	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	dbf0      	blt.n	8000518 <_read+0x12>
  }

  return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	e009      	b.n	8000566 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	1c5a      	adds	r2, r3, #1
 8000556:	60ba      	str	r2, [r7, #8]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f888 	bl	8000670 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	3301      	adds	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	697a      	ldr	r2, [r7, #20]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbf1      	blt.n	8000552 <_write+0x12>
  }
  return len;
 800056e:	687b      	ldr	r3, [r7, #4]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <_close>:

int _close(int file)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800059e:	605a      	str	r2, [r3, #4]
  return 0;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <_isatty>:

int _isatty(int file)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005b4:	2301      	movs	r3, #1
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <_sbrk+0x5c>)
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <_sbrk+0x60>)
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <_sbrk+0x64>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <_sbrk+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	429a      	cmp	r2, r3
 8000606:	d207      	bcs.n	8000618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000608:	f000 f8be 	bl	8000788 <__errno>
 800060c:	4603      	mov	r3, r0
 800060e:	220c      	movs	r2, #12
 8000610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000616:	e009      	b.n	800062c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <_sbrk+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <_sbrk+0x64>)
 8000628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20005000 	.word	0x20005000
 8000638:	00000400 	.word	0x00000400
 800063c:	20000084 	.word	0x20000084
 8000640:	20000098 	.word	0x20000098

08000644 <uart2_write>:

char ch = '\0';


void uart2_write(int channel)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

	while(!(USART2->SR & USART_SR_TXE)){}
 800064c:	bf00      	nop
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <uart2_write+0x28>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f9      	beq.n	800064e <uart2_write+0xa>


	USART2->DR	=  (channel & 0xFF);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <uart2_write+0x28>)
 800065e:	b2db      	uxtb	r3, r3
 8000660:	6053      	str	r3, [r2, #4]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40004400 	.word	0x40004400

08000670 <__io_putchar>:


int __io_putchar(int channel)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	 uart2_write(channel);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ffe3 	bl	8000644 <uart2_write>
	 return channel;
 800067e:	687b      	ldr	r3, [r7, #4]

}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <uart2_init>:

void uart2_init()
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0


	/*UART2*/

	//habilita o clock do GPIOA
	RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <uart2_init+0x9c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a24      	ldr	r2, [pc, #144]	; (8000724 <uart2_init+0x9c>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
	//Habilita o acesso para funcao alternativa
	RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <uart2_init+0x9c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <uart2_init+0x9c>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6193      	str	r3, [r2, #24]

	//Configura PA2 como output para o Tx
	GPIOA->CRL|=GPIO_CRL_MODE2;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <uart2_init+0xa0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <uart2_init+0xa0>)
 80006aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80006ae:	6013      	str	r3, [r2, #0]
	GPIOA->CRL|=GPIO_CRL_CNF2_1;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <uart2_init+0xa0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <uart2_init+0xa0>)
 80006b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL&=~GPIO_CRL_CNF2_0;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <uart2_init+0xa0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <uart2_init+0xa0>)
 80006c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006c6:	6013      	str	r3, [r2, #0]


	/*Configuracao da USART2*/

	//Habilita o clock da USART2 do Tx
	RCC->APB1ENR|=RCC_APB1ENR_USART2EN;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <uart2_init+0x9c>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <uart2_init+0x9c>)
 80006ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d2:	61d3      	str	r3, [r2, #28]
	// Habilita o clock da USART1 para o Rx
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <uart2_init+0x9c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <uart2_init+0x9c>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6193      	str	r3, [r2, #24]


	//Habilita a transmissao
	USART2->CR1 |= USART_CR1_TE;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <uart2_init+0xa4>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a11      	ldr	r2, [pc, #68]	; (800072c <uart2_init+0xa4>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	60d3      	str	r3, [r2, #12]
	// Habilita a recepcao
	USART1->CR1 |= USART_CR1_RE;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <uart2_init+0xa8>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <uart2_init+0xa8>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	60d3      	str	r3, [r2, #12]

	/*Confugura baud rate */
	USART2->BRR = ((CPU_CLK + (BaudRate/2U))/BaudRate); // Tx
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <uart2_init+0xa4>)
 80006fa:	2245      	movs	r2, #69	; 0x45
 80006fc:	609a      	str	r2, [r3, #8]
	USART1->BRR = ((CPU_CLK + (BaudRate/2U))/BaudRate); // Rx
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <uart2_init+0xa8>)
 8000700:	2245      	movs	r2, #69	; 0x45
 8000702:	609a      	str	r2, [r3, #8]

	//Habilita a USART
	USART2->CR1 |= USART_CR1_UE;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <uart2_init+0xa4>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <uart2_init+0xa4>)
 800070a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800070e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_UE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <uart2_init+0xa8>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <uart2_init+0xa8>)
 8000716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800071a:	60d3      	str	r3, [r2, #12]




}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800
 800072c:	40004400 	.word	0x40004400
 8000730:	40013800 	.word	0x40013800

08000734 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000736:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000738:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000762:	f000 f817 	bl	8000794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fe6b 	bl	8000440 <main>

0800076a <LoopForever>:

LoopForever:
  b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   r0, =_estack
 800076c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000778:	08001a3c 	.word	0x08001a3c
  ldr r2, =_sbss
 800077c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000780:	20000098 	.word	0x20000098

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <__errno>:
 8000788:	4b01      	ldr	r3, [pc, #4]	; (8000790 <__errno+0x8>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000

08000794 <__libc_init_array>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	2600      	movs	r6, #0
 8000798:	4d0c      	ldr	r5, [pc, #48]	; (80007cc <__libc_init_array+0x38>)
 800079a:	4c0d      	ldr	r4, [pc, #52]	; (80007d0 <__libc_init_array+0x3c>)
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	10a4      	asrs	r4, r4, #2
 80007a0:	42a6      	cmp	r6, r4
 80007a2:	d109      	bne.n	80007b8 <__libc_init_array+0x24>
 80007a4:	f001 f868 	bl	8001878 <_init>
 80007a8:	2600      	movs	r6, #0
 80007aa:	4d0a      	ldr	r5, [pc, #40]	; (80007d4 <__libc_init_array+0x40>)
 80007ac:	4c0a      	ldr	r4, [pc, #40]	; (80007d8 <__libc_init_array+0x44>)
 80007ae:	1b64      	subs	r4, r4, r5
 80007b0:	10a4      	asrs	r4, r4, #2
 80007b2:	42a6      	cmp	r6, r4
 80007b4:	d105      	bne.n	80007c2 <__libc_init_array+0x2e>
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007bc:	4798      	blx	r3
 80007be:	3601      	adds	r6, #1
 80007c0:	e7ee      	b.n	80007a0 <__libc_init_array+0xc>
 80007c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c6:	4798      	blx	r3
 80007c8:	3601      	adds	r6, #1
 80007ca:	e7f2      	b.n	80007b2 <__libc_init_array+0x1e>
 80007cc:	08001a34 	.word	0x08001a34
 80007d0:	08001a34 	.word	0x08001a34
 80007d4:	08001a34 	.word	0x08001a34
 80007d8:	08001a38 	.word	0x08001a38

080007dc <memset>:
 80007dc:	4603      	mov	r3, r0
 80007de:	4402      	add	r2, r0
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d100      	bne.n	80007e6 <memset+0xa>
 80007e4:	4770      	bx	lr
 80007e6:	f803 1b01 	strb.w	r1, [r3], #1
 80007ea:	e7f9      	b.n	80007e0 <memset+0x4>

080007ec <iprintf>:
 80007ec:	b40f      	push	{r0, r1, r2, r3}
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <iprintf+0x2c>)
 80007f0:	b513      	push	{r0, r1, r4, lr}
 80007f2:	681c      	ldr	r4, [r3, #0]
 80007f4:	b124      	cbz	r4, 8000800 <iprintf+0x14>
 80007f6:	69a3      	ldr	r3, [r4, #24]
 80007f8:	b913      	cbnz	r3, 8000800 <iprintf+0x14>
 80007fa:	4620      	mov	r0, r4
 80007fc:	f000 f8b2 	bl	8000964 <__sinit>
 8000800:	ab05      	add	r3, sp, #20
 8000802:	4620      	mov	r0, r4
 8000804:	9a04      	ldr	r2, [sp, #16]
 8000806:	68a1      	ldr	r1, [r4, #8]
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	f000 fa69 	bl	8000ce0 <_vfiprintf_r>
 800080e:	b002      	add	sp, #8
 8000810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000814:	b004      	add	sp, #16
 8000816:	4770      	bx	lr
 8000818:	20000000 	.word	0x20000000

0800081c <srand>:
 800081c:	b538      	push	{r3, r4, r5, lr}
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <srand+0x44>)
 8000820:	4604      	mov	r4, r0
 8000822:	681d      	ldr	r5, [r3, #0]
 8000824:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000826:	b9b3      	cbnz	r3, 8000856 <srand+0x3a>
 8000828:	2018      	movs	r0, #24
 800082a:	f000 f94d 	bl	8000ac8 <malloc>
 800082e:	4602      	mov	r2, r0
 8000830:	63a8      	str	r0, [r5, #56]	; 0x38
 8000832:	b920      	cbnz	r0, 800083e <srand+0x22>
 8000834:	2142      	movs	r1, #66	; 0x42
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <srand+0x48>)
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <srand+0x4c>)
 800083a:	f000 f81d 	bl	8000878 <__assert_func>
 800083e:	490b      	ldr	r1, [pc, #44]	; (800086c <srand+0x50>)
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <srand+0x54>)
 8000842:	e9c0 1300 	strd	r1, r3, [r0]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <srand+0x58>)
 8000848:	2100      	movs	r1, #0
 800084a:	6083      	str	r3, [r0, #8]
 800084c:	230b      	movs	r3, #11
 800084e:	8183      	strh	r3, [r0, #12]
 8000850:	2001      	movs	r0, #1
 8000852:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000856:	2200      	movs	r2, #0
 8000858:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800085a:	611c      	str	r4, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	bd38      	pop	{r3, r4, r5, pc}
 8000860:	20000000 	.word	0x20000000
 8000864:	080018f0 	.word	0x080018f0
 8000868:	08001907 	.word	0x08001907
 800086c:	abcd330e 	.word	0xabcd330e
 8000870:	e66d1234 	.word	0xe66d1234
 8000874:	0005deec 	.word	0x0005deec

08000878 <__assert_func>:
 8000878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800087a:	4614      	mov	r4, r2
 800087c:	461a      	mov	r2, r3
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <__assert_func+0x2c>)
 8000880:	4605      	mov	r5, r0
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68d8      	ldr	r0, [r3, #12]
 8000886:	b14c      	cbz	r4, 800089c <__assert_func+0x24>
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <__assert_func+0x30>)
 800088a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800088e:	9100      	str	r1, [sp, #0]
 8000890:	462b      	mov	r3, r5
 8000892:	4906      	ldr	r1, [pc, #24]	; (80008ac <__assert_func+0x34>)
 8000894:	f000 f8e4 	bl	8000a60 <fiprintf>
 8000898:	f000 fe0e 	bl	80014b8 <abort>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__assert_func+0x38>)
 800089e:	461c      	mov	r4, r3
 80008a0:	e7f3      	b.n	800088a <__assert_func+0x12>
 80008a2:	bf00      	nop
 80008a4:	20000000 	.word	0x20000000
 80008a8:	08001962 	.word	0x08001962
 80008ac:	0800196f 	.word	0x0800196f
 80008b0:	0800199d 	.word	0x0800199d

080008b4 <std>:
 80008b4:	2300      	movs	r3, #0
 80008b6:	b510      	push	{r4, lr}
 80008b8:	4604      	mov	r4, r0
 80008ba:	e9c0 3300 	strd	r3, r3, [r0]
 80008be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008c2:	6083      	str	r3, [r0, #8]
 80008c4:	8181      	strh	r1, [r0, #12]
 80008c6:	6643      	str	r3, [r0, #100]	; 0x64
 80008c8:	81c2      	strh	r2, [r0, #14]
 80008ca:	6183      	str	r3, [r0, #24]
 80008cc:	4619      	mov	r1, r3
 80008ce:	2208      	movs	r2, #8
 80008d0:	305c      	adds	r0, #92	; 0x5c
 80008d2:	f7ff ff83 	bl	80007dc <memset>
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <std+0x38>)
 80008d8:	6224      	str	r4, [r4, #32]
 80008da:	6263      	str	r3, [r4, #36]	; 0x24
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <std+0x3c>)
 80008de:	62a3      	str	r3, [r4, #40]	; 0x28
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <std+0x40>)
 80008e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <std+0x44>)
 80008e6:	6323      	str	r3, [r4, #48]	; 0x30
 80008e8:	bd10      	pop	{r4, pc}
 80008ea:	bf00      	nop
 80008ec:	0800128d 	.word	0x0800128d
 80008f0:	080012af 	.word	0x080012af
 80008f4:	080012e7 	.word	0x080012e7
 80008f8:	0800130b 	.word	0x0800130b

080008fc <_cleanup_r>:
 80008fc:	4901      	ldr	r1, [pc, #4]	; (8000904 <_cleanup_r+0x8>)
 80008fe:	f000 b8c1 	b.w	8000a84 <_fwalk_reent>
 8000902:	bf00      	nop
 8000904:	080015ed 	.word	0x080015ed

08000908 <__sfmoreglue>:
 8000908:	2268      	movs	r2, #104	; 0x68
 800090a:	b570      	push	{r4, r5, r6, lr}
 800090c:	1e4d      	subs	r5, r1, #1
 800090e:	4355      	muls	r5, r2
 8000910:	460e      	mov	r6, r1
 8000912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000916:	f000 f947 	bl	8000ba8 <_malloc_r>
 800091a:	4604      	mov	r4, r0
 800091c:	b140      	cbz	r0, 8000930 <__sfmoreglue+0x28>
 800091e:	2100      	movs	r1, #0
 8000920:	e9c0 1600 	strd	r1, r6, [r0]
 8000924:	300c      	adds	r0, #12
 8000926:	60a0      	str	r0, [r4, #8]
 8000928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800092c:	f7ff ff56 	bl	80007dc <memset>
 8000930:	4620      	mov	r0, r4
 8000932:	bd70      	pop	{r4, r5, r6, pc}

08000934 <__sfp_lock_acquire>:
 8000934:	4801      	ldr	r0, [pc, #4]	; (800093c <__sfp_lock_acquire+0x8>)
 8000936:	f000 b8c5 	b.w	8000ac4 <__retarget_lock_acquire_recursive>
 800093a:	bf00      	nop
 800093c:	20000089 	.word	0x20000089

08000940 <__sfp_lock_release>:
 8000940:	4801      	ldr	r0, [pc, #4]	; (8000948 <__sfp_lock_release+0x8>)
 8000942:	f000 b8c0 	b.w	8000ac6 <__retarget_lock_release_recursive>
 8000946:	bf00      	nop
 8000948:	20000089 	.word	0x20000089

0800094c <__sinit_lock_acquire>:
 800094c:	4801      	ldr	r0, [pc, #4]	; (8000954 <__sinit_lock_acquire+0x8>)
 800094e:	f000 b8b9 	b.w	8000ac4 <__retarget_lock_acquire_recursive>
 8000952:	bf00      	nop
 8000954:	2000008a 	.word	0x2000008a

08000958 <__sinit_lock_release>:
 8000958:	4801      	ldr	r0, [pc, #4]	; (8000960 <__sinit_lock_release+0x8>)
 800095a:	f000 b8b4 	b.w	8000ac6 <__retarget_lock_release_recursive>
 800095e:	bf00      	nop
 8000960:	2000008a 	.word	0x2000008a

08000964 <__sinit>:
 8000964:	b510      	push	{r4, lr}
 8000966:	4604      	mov	r4, r0
 8000968:	f7ff fff0 	bl	800094c <__sinit_lock_acquire>
 800096c:	69a3      	ldr	r3, [r4, #24]
 800096e:	b11b      	cbz	r3, 8000978 <__sinit+0x14>
 8000970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000974:	f7ff bff0 	b.w	8000958 <__sinit_lock_release>
 8000978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800097c:	6523      	str	r3, [r4, #80]	; 0x50
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <__sinit+0x68>)
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <__sinit+0x6c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	62a2      	str	r2, [r4, #40]	; 0x28
 8000986:	42a3      	cmp	r3, r4
 8000988:	bf08      	it	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	4620      	mov	r0, r4
 800098e:	bf08      	it	eq
 8000990:	61a3      	streq	r3, [r4, #24]
 8000992:	f000 f81f 	bl	80009d4 <__sfp>
 8000996:	6060      	str	r0, [r4, #4]
 8000998:	4620      	mov	r0, r4
 800099a:	f000 f81b 	bl	80009d4 <__sfp>
 800099e:	60a0      	str	r0, [r4, #8]
 80009a0:	4620      	mov	r0, r4
 80009a2:	f000 f817 	bl	80009d4 <__sfp>
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	60e0      	str	r0, [r4, #12]
 80009ac:	6860      	ldr	r0, [r4, #4]
 80009ae:	f7ff ff81 	bl	80008b4 <std>
 80009b2:	2201      	movs	r2, #1
 80009b4:	2109      	movs	r1, #9
 80009b6:	68a0      	ldr	r0, [r4, #8]
 80009b8:	f7ff ff7c 	bl	80008b4 <std>
 80009bc:	2202      	movs	r2, #2
 80009be:	2112      	movs	r1, #18
 80009c0:	68e0      	ldr	r0, [r4, #12]
 80009c2:	f7ff ff77 	bl	80008b4 <std>
 80009c6:	2301      	movs	r3, #1
 80009c8:	61a3      	str	r3, [r4, #24]
 80009ca:	e7d1      	b.n	8000970 <__sinit+0xc>
 80009cc:	080018ec 	.word	0x080018ec
 80009d0:	080008fd 	.word	0x080008fd

080009d4 <__sfp>:
 80009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d6:	4607      	mov	r7, r0
 80009d8:	f7ff ffac 	bl	8000934 <__sfp_lock_acquire>
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <__sfp+0x84>)
 80009de:	681e      	ldr	r6, [r3, #0]
 80009e0:	69b3      	ldr	r3, [r6, #24]
 80009e2:	b913      	cbnz	r3, 80009ea <__sfp+0x16>
 80009e4:	4630      	mov	r0, r6
 80009e6:	f7ff ffbd 	bl	8000964 <__sinit>
 80009ea:	3648      	adds	r6, #72	; 0x48
 80009ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	d503      	bpl.n	80009fc <__sfp+0x28>
 80009f4:	6833      	ldr	r3, [r6, #0]
 80009f6:	b30b      	cbz	r3, 8000a3c <__sfp+0x68>
 80009f8:	6836      	ldr	r6, [r6, #0]
 80009fa:	e7f7      	b.n	80009ec <__sfp+0x18>
 80009fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a00:	b9d5      	cbnz	r5, 8000a38 <__sfp+0x64>
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <__sfp+0x88>)
 8000a04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a08:	60e3      	str	r3, [r4, #12]
 8000a0a:	6665      	str	r5, [r4, #100]	; 0x64
 8000a0c:	f000 f859 	bl	8000ac2 <__retarget_lock_init_recursive>
 8000a10:	f7ff ff96 	bl	8000940 <__sfp_lock_release>
 8000a14:	2208      	movs	r2, #8
 8000a16:	4629      	mov	r1, r5
 8000a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a20:	6025      	str	r5, [r4, #0]
 8000a22:	61a5      	str	r5, [r4, #24]
 8000a24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a28:	f7ff fed8 	bl	80007dc <memset>
 8000a2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a34:	4620      	mov	r0, r4
 8000a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a38:	3468      	adds	r4, #104	; 0x68
 8000a3a:	e7d9      	b.n	80009f0 <__sfp+0x1c>
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f7ff ff62 	bl	8000908 <__sfmoreglue>
 8000a44:	4604      	mov	r4, r0
 8000a46:	6030      	str	r0, [r6, #0]
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d1d5      	bne.n	80009f8 <__sfp+0x24>
 8000a4c:	f7ff ff78 	bl	8000940 <__sfp_lock_release>
 8000a50:	230c      	movs	r3, #12
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	e7ee      	b.n	8000a34 <__sfp+0x60>
 8000a56:	bf00      	nop
 8000a58:	080018ec 	.word	0x080018ec
 8000a5c:	ffff0001 	.word	0xffff0001

08000a60 <fiprintf>:
 8000a60:	b40e      	push	{r1, r2, r3}
 8000a62:	b503      	push	{r0, r1, lr}
 8000a64:	4601      	mov	r1, r0
 8000a66:	ab03      	add	r3, sp, #12
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <fiprintf+0x20>)
 8000a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a6e:	6800      	ldr	r0, [r0, #0]
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	f000 f935 	bl	8000ce0 <_vfiprintf_r>
 8000a76:	b002      	add	sp, #8
 8000a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a7c:	b003      	add	sp, #12
 8000a7e:	4770      	bx	lr
 8000a80:	20000000 	.word	0x20000000

08000a84 <_fwalk_reent>:
 8000a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a88:	4606      	mov	r6, r0
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	2700      	movs	r7, #0
 8000a8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a96:	f1b9 0901 	subs.w	r9, r9, #1
 8000a9a:	d505      	bpl.n	8000aa8 <_fwalk_reent+0x24>
 8000a9c:	6824      	ldr	r4, [r4, #0]
 8000a9e:	2c00      	cmp	r4, #0
 8000aa0:	d1f7      	bne.n	8000a92 <_fwalk_reent+0xe>
 8000aa2:	4638      	mov	r0, r7
 8000aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aa8:	89ab      	ldrh	r3, [r5, #12]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d907      	bls.n	8000abe <_fwalk_reent+0x3a>
 8000aae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	d003      	beq.n	8000abe <_fwalk_reent+0x3a>
 8000ab6:	4629      	mov	r1, r5
 8000ab8:	4630      	mov	r0, r6
 8000aba:	47c0      	blx	r8
 8000abc:	4307      	orrs	r7, r0
 8000abe:	3568      	adds	r5, #104	; 0x68
 8000ac0:	e7e9      	b.n	8000a96 <_fwalk_reent+0x12>

08000ac2 <__retarget_lock_init_recursive>:
 8000ac2:	4770      	bx	lr

08000ac4 <__retarget_lock_acquire_recursive>:
 8000ac4:	4770      	bx	lr

08000ac6 <__retarget_lock_release_recursive>:
 8000ac6:	4770      	bx	lr

08000ac8 <malloc>:
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <malloc+0xc>)
 8000aca:	4601      	mov	r1, r0
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	f000 b86b 	b.w	8000ba8 <_malloc_r>
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <_free_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4605      	mov	r5, r0
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d040      	beq.n	8000b62 <_free_r+0x8a>
 8000ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ae4:	1f0c      	subs	r4, r1, #4
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bfb8      	it	lt
 8000aea:	18e4      	addlt	r4, r4, r3
 8000aec:	f000 fe40 	bl	8001770 <__malloc_lock>
 8000af0:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <_free_r+0x8c>)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	b933      	cbnz	r3, 8000b04 <_free_r+0x2c>
 8000af6:	6063      	str	r3, [r4, #4]
 8000af8:	6014      	str	r4, [r2, #0]
 8000afa:	4628      	mov	r0, r5
 8000afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b00:	f000 be3c 	b.w	800177c <__malloc_unlock>
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d908      	bls.n	8000b1a <_free_r+0x42>
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	1821      	adds	r1, r4, r0
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	bf01      	itttt	eq
 8000b10:	6819      	ldreq	r1, [r3, #0]
 8000b12:	685b      	ldreq	r3, [r3, #4]
 8000b14:	1809      	addeq	r1, r1, r0
 8000b16:	6021      	streq	r1, [r4, #0]
 8000b18:	e7ed      	b.n	8000af6 <_free_r+0x1e>
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	b10b      	cbz	r3, 8000b24 <_free_r+0x4c>
 8000b20:	42a3      	cmp	r3, r4
 8000b22:	d9fa      	bls.n	8000b1a <_free_r+0x42>
 8000b24:	6811      	ldr	r1, [r2, #0]
 8000b26:	1850      	adds	r0, r2, r1
 8000b28:	42a0      	cmp	r0, r4
 8000b2a:	d10b      	bne.n	8000b44 <_free_r+0x6c>
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	4401      	add	r1, r0
 8000b30:	1850      	adds	r0, r2, r1
 8000b32:	4283      	cmp	r3, r0
 8000b34:	6011      	str	r1, [r2, #0]
 8000b36:	d1e0      	bne.n	8000afa <_free_r+0x22>
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	4401      	add	r1, r0
 8000b3e:	6011      	str	r1, [r2, #0]
 8000b40:	6053      	str	r3, [r2, #4]
 8000b42:	e7da      	b.n	8000afa <_free_r+0x22>
 8000b44:	d902      	bls.n	8000b4c <_free_r+0x74>
 8000b46:	230c      	movs	r3, #12
 8000b48:	602b      	str	r3, [r5, #0]
 8000b4a:	e7d6      	b.n	8000afa <_free_r+0x22>
 8000b4c:	6820      	ldr	r0, [r4, #0]
 8000b4e:	1821      	adds	r1, r4, r0
 8000b50:	428b      	cmp	r3, r1
 8000b52:	bf01      	itttt	eq
 8000b54:	6819      	ldreq	r1, [r3, #0]
 8000b56:	685b      	ldreq	r3, [r3, #4]
 8000b58:	1809      	addeq	r1, r1, r0
 8000b5a:	6021      	streq	r1, [r4, #0]
 8000b5c:	6063      	str	r3, [r4, #4]
 8000b5e:	6054      	str	r4, [r2, #4]
 8000b60:	e7cb      	b.n	8000afa <_free_r+0x22>
 8000b62:	bd38      	pop	{r3, r4, r5, pc}
 8000b64:	2000008c 	.word	0x2000008c

08000b68 <sbrk_aligned>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	4e0e      	ldr	r6, [pc, #56]	; (8000ba4 <sbrk_aligned+0x3c>)
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	6831      	ldr	r1, [r6, #0]
 8000b70:	4605      	mov	r5, r0
 8000b72:	b911      	cbnz	r1, 8000b7a <sbrk_aligned+0x12>
 8000b74:	f000 fb7a 	bl	800126c <_sbrk_r>
 8000b78:	6030      	str	r0, [r6, #0]
 8000b7a:	4621      	mov	r1, r4
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	f000 fb75 	bl	800126c <_sbrk_r>
 8000b82:	1c43      	adds	r3, r0, #1
 8000b84:	d00a      	beq.n	8000b9c <sbrk_aligned+0x34>
 8000b86:	1cc4      	adds	r4, r0, #3
 8000b88:	f024 0403 	bic.w	r4, r4, #3
 8000b8c:	42a0      	cmp	r0, r4
 8000b8e:	d007      	beq.n	8000ba0 <sbrk_aligned+0x38>
 8000b90:	1a21      	subs	r1, r4, r0
 8000b92:	4628      	mov	r0, r5
 8000b94:	f000 fb6a 	bl	800126c <_sbrk_r>
 8000b98:	3001      	adds	r0, #1
 8000b9a:	d101      	bne.n	8000ba0 <sbrk_aligned+0x38>
 8000b9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	20000090 	.word	0x20000090

08000ba8 <_malloc_r>:
 8000ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bac:	1ccd      	adds	r5, r1, #3
 8000bae:	f025 0503 	bic.w	r5, r5, #3
 8000bb2:	3508      	adds	r5, #8
 8000bb4:	2d0c      	cmp	r5, #12
 8000bb6:	bf38      	it	cc
 8000bb8:	250c      	movcc	r5, #12
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	4607      	mov	r7, r0
 8000bbe:	db01      	blt.n	8000bc4 <_malloc_r+0x1c>
 8000bc0:	42a9      	cmp	r1, r5
 8000bc2:	d905      	bls.n	8000bd0 <_malloc_r+0x28>
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4630      	mov	r0, r6
 8000bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bd0:	4e2e      	ldr	r6, [pc, #184]	; (8000c8c <_malloc_r+0xe4>)
 8000bd2:	f000 fdcd 	bl	8001770 <__malloc_lock>
 8000bd6:	6833      	ldr	r3, [r6, #0]
 8000bd8:	461c      	mov	r4, r3
 8000bda:	bb34      	cbnz	r4, 8000c2a <_malloc_r+0x82>
 8000bdc:	4629      	mov	r1, r5
 8000bde:	4638      	mov	r0, r7
 8000be0:	f7ff ffc2 	bl	8000b68 <sbrk_aligned>
 8000be4:	1c43      	adds	r3, r0, #1
 8000be6:	4604      	mov	r4, r0
 8000be8:	d14d      	bne.n	8000c86 <_malloc_r+0xde>
 8000bea:	6834      	ldr	r4, [r6, #0]
 8000bec:	4626      	mov	r6, r4
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d140      	bne.n	8000c74 <_malloc_r+0xcc>
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	eb04 0803 	add.w	r8, r4, r3
 8000bfc:	f000 fb36 	bl	800126c <_sbrk_r>
 8000c00:	4580      	cmp	r8, r0
 8000c02:	d13a      	bne.n	8000c7a <_malloc_r+0xd2>
 8000c04:	6821      	ldr	r1, [r4, #0]
 8000c06:	3503      	adds	r5, #3
 8000c08:	1a6d      	subs	r5, r5, r1
 8000c0a:	f025 0503 	bic.w	r5, r5, #3
 8000c0e:	3508      	adds	r5, #8
 8000c10:	2d0c      	cmp	r5, #12
 8000c12:	bf38      	it	cc
 8000c14:	250c      	movcc	r5, #12
 8000c16:	4638      	mov	r0, r7
 8000c18:	4629      	mov	r1, r5
 8000c1a:	f7ff ffa5 	bl	8000b68 <sbrk_aligned>
 8000c1e:	3001      	adds	r0, #1
 8000c20:	d02b      	beq.n	8000c7a <_malloc_r+0xd2>
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	442b      	add	r3, r5
 8000c26:	6023      	str	r3, [r4, #0]
 8000c28:	e00e      	b.n	8000c48 <_malloc_r+0xa0>
 8000c2a:	6822      	ldr	r2, [r4, #0]
 8000c2c:	1b52      	subs	r2, r2, r5
 8000c2e:	d41e      	bmi.n	8000c6e <_malloc_r+0xc6>
 8000c30:	2a0b      	cmp	r2, #11
 8000c32:	d916      	bls.n	8000c62 <_malloc_r+0xba>
 8000c34:	1961      	adds	r1, r4, r5
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	6025      	str	r5, [r4, #0]
 8000c3a:	bf18      	it	ne
 8000c3c:	6059      	strne	r1, [r3, #4]
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	bf08      	it	eq
 8000c42:	6031      	streq	r1, [r6, #0]
 8000c44:	5162      	str	r2, [r4, r5]
 8000c46:	604b      	str	r3, [r1, #4]
 8000c48:	4638      	mov	r0, r7
 8000c4a:	f104 060b 	add.w	r6, r4, #11
 8000c4e:	f000 fd95 	bl	800177c <__malloc_unlock>
 8000c52:	f026 0607 	bic.w	r6, r6, #7
 8000c56:	1d23      	adds	r3, r4, #4
 8000c58:	1af2      	subs	r2, r6, r3
 8000c5a:	d0b6      	beq.n	8000bca <_malloc_r+0x22>
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	50a3      	str	r3, [r4, r2]
 8000c60:	e7b3      	b.n	8000bca <_malloc_r+0x22>
 8000c62:	6862      	ldr	r2, [r4, #4]
 8000c64:	42a3      	cmp	r3, r4
 8000c66:	bf0c      	ite	eq
 8000c68:	6032      	streq	r2, [r6, #0]
 8000c6a:	605a      	strne	r2, [r3, #4]
 8000c6c:	e7ec      	b.n	8000c48 <_malloc_r+0xa0>
 8000c6e:	4623      	mov	r3, r4
 8000c70:	6864      	ldr	r4, [r4, #4]
 8000c72:	e7b2      	b.n	8000bda <_malloc_r+0x32>
 8000c74:	4634      	mov	r4, r6
 8000c76:	6876      	ldr	r6, [r6, #4]
 8000c78:	e7b9      	b.n	8000bee <_malloc_r+0x46>
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	4638      	mov	r0, r7
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	f000 fd7c 	bl	800177c <__malloc_unlock>
 8000c84:	e7a1      	b.n	8000bca <_malloc_r+0x22>
 8000c86:	6025      	str	r5, [r4, #0]
 8000c88:	e7de      	b.n	8000c48 <_malloc_r+0xa0>
 8000c8a:	bf00      	nop
 8000c8c:	2000008c 	.word	0x2000008c

08000c90 <__sfputc_r>:
 8000c90:	6893      	ldr	r3, [r2, #8]
 8000c92:	b410      	push	{r4}
 8000c94:	3b01      	subs	r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	6093      	str	r3, [r2, #8]
 8000c9a:	da07      	bge.n	8000cac <__sfputc_r+0x1c>
 8000c9c:	6994      	ldr	r4, [r2, #24]
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	db01      	blt.n	8000ca6 <__sfputc_r+0x16>
 8000ca2:	290a      	cmp	r1, #10
 8000ca4:	d102      	bne.n	8000cac <__sfputc_r+0x1c>
 8000ca6:	bc10      	pop	{r4}
 8000ca8:	f000 bb34 	b.w	8001314 <__swbuf_r>
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	1c58      	adds	r0, r3, #1
 8000cb0:	6010      	str	r0, [r2, #0]
 8000cb2:	7019      	strb	r1, [r3, #0]
 8000cb4:	4608      	mov	r0, r1
 8000cb6:	bc10      	pop	{r4}
 8000cb8:	4770      	bx	lr

08000cba <__sfputs_r>:
 8000cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	460f      	mov	r7, r1
 8000cc0:	4614      	mov	r4, r2
 8000cc2:	18d5      	adds	r5, r2, r3
 8000cc4:	42ac      	cmp	r4, r5
 8000cc6:	d101      	bne.n	8000ccc <__sfputs_r+0x12>
 8000cc8:	2000      	movs	r0, #0
 8000cca:	e007      	b.n	8000cdc <__sfputs_r+0x22>
 8000ccc:	463a      	mov	r2, r7
 8000cce:	4630      	mov	r0, r6
 8000cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cd4:	f7ff ffdc 	bl	8000c90 <__sfputc_r>
 8000cd8:	1c43      	adds	r3, r0, #1
 8000cda:	d1f3      	bne.n	8000cc4 <__sfputs_r+0xa>
 8000cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ce0 <_vfiprintf_r>:
 8000ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce4:	460d      	mov	r5, r1
 8000ce6:	4614      	mov	r4, r2
 8000ce8:	4698      	mov	r8, r3
 8000cea:	4606      	mov	r6, r0
 8000cec:	b09d      	sub	sp, #116	; 0x74
 8000cee:	b118      	cbz	r0, 8000cf8 <_vfiprintf_r+0x18>
 8000cf0:	6983      	ldr	r3, [r0, #24]
 8000cf2:	b90b      	cbnz	r3, 8000cf8 <_vfiprintf_r+0x18>
 8000cf4:	f7ff fe36 	bl	8000964 <__sinit>
 8000cf8:	4b89      	ldr	r3, [pc, #548]	; (8000f20 <_vfiprintf_r+0x240>)
 8000cfa:	429d      	cmp	r5, r3
 8000cfc:	d11b      	bne.n	8000d36 <_vfiprintf_r+0x56>
 8000cfe:	6875      	ldr	r5, [r6, #4]
 8000d00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d02:	07d9      	lsls	r1, r3, #31
 8000d04:	d405      	bmi.n	8000d12 <_vfiprintf_r+0x32>
 8000d06:	89ab      	ldrh	r3, [r5, #12]
 8000d08:	059a      	lsls	r2, r3, #22
 8000d0a:	d402      	bmi.n	8000d12 <_vfiprintf_r+0x32>
 8000d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d0e:	f7ff fed9 	bl	8000ac4 <__retarget_lock_acquire_recursive>
 8000d12:	89ab      	ldrh	r3, [r5, #12]
 8000d14:	071b      	lsls	r3, r3, #28
 8000d16:	d501      	bpl.n	8000d1c <_vfiprintf_r+0x3c>
 8000d18:	692b      	ldr	r3, [r5, #16]
 8000d1a:	b9eb      	cbnz	r3, 8000d58 <_vfiprintf_r+0x78>
 8000d1c:	4629      	mov	r1, r5
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f000 fb5c 	bl	80013dc <__swsetup_r>
 8000d24:	b1c0      	cbz	r0, 8000d58 <_vfiprintf_r+0x78>
 8000d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d28:	07dc      	lsls	r4, r3, #31
 8000d2a:	d50e      	bpl.n	8000d4a <_vfiprintf_r+0x6a>
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d30:	b01d      	add	sp, #116	; 0x74
 8000d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d36:	4b7b      	ldr	r3, [pc, #492]	; (8000f24 <_vfiprintf_r+0x244>)
 8000d38:	429d      	cmp	r5, r3
 8000d3a:	d101      	bne.n	8000d40 <_vfiprintf_r+0x60>
 8000d3c:	68b5      	ldr	r5, [r6, #8]
 8000d3e:	e7df      	b.n	8000d00 <_vfiprintf_r+0x20>
 8000d40:	4b79      	ldr	r3, [pc, #484]	; (8000f28 <_vfiprintf_r+0x248>)
 8000d42:	429d      	cmp	r5, r3
 8000d44:	bf08      	it	eq
 8000d46:	68f5      	ldreq	r5, [r6, #12]
 8000d48:	e7da      	b.n	8000d00 <_vfiprintf_r+0x20>
 8000d4a:	89ab      	ldrh	r3, [r5, #12]
 8000d4c:	0598      	lsls	r0, r3, #22
 8000d4e:	d4ed      	bmi.n	8000d2c <_vfiprintf_r+0x4c>
 8000d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d52:	f7ff feb8 	bl	8000ac6 <__retarget_lock_release_recursive>
 8000d56:	e7e9      	b.n	8000d2c <_vfiprintf_r+0x4c>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d62:	2330      	movs	r3, #48	; 0x30
 8000d64:	f04f 0901 	mov.w	r9, #1
 8000d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d6c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000f2c <_vfiprintf_r+0x24c>
 8000d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d74:	4623      	mov	r3, r4
 8000d76:	469a      	mov	sl, r3
 8000d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d7c:	b10a      	cbz	r2, 8000d82 <_vfiprintf_r+0xa2>
 8000d7e:	2a25      	cmp	r2, #37	; 0x25
 8000d80:	d1f9      	bne.n	8000d76 <_vfiprintf_r+0x96>
 8000d82:	ebba 0b04 	subs.w	fp, sl, r4
 8000d86:	d00b      	beq.n	8000da0 <_vfiprintf_r+0xc0>
 8000d88:	465b      	mov	r3, fp
 8000d8a:	4622      	mov	r2, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	4630      	mov	r0, r6
 8000d90:	f7ff ff93 	bl	8000cba <__sfputs_r>
 8000d94:	3001      	adds	r0, #1
 8000d96:	f000 80aa 	beq.w	8000eee <_vfiprintf_r+0x20e>
 8000d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d9c:	445a      	add	r2, fp
 8000d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8000da0:	f89a 3000 	ldrb.w	r3, [sl]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 80a2 	beq.w	8000eee <_vfiprintf_r+0x20e>
 8000daa:	2300      	movs	r3, #0
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000db4:	f10a 0a01 	add.w	sl, sl, #1
 8000db8:	9304      	str	r3, [sp, #16]
 8000dba:	9307      	str	r3, [sp, #28]
 8000dbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8000dc2:	4654      	mov	r4, sl
 8000dc4:	2205      	movs	r2, #5
 8000dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dca:	4858      	ldr	r0, [pc, #352]	; (8000f2c <_vfiprintf_r+0x24c>)
 8000dcc:	f000 fcc2 	bl	8001754 <memchr>
 8000dd0:	9a04      	ldr	r2, [sp, #16]
 8000dd2:	b9d8      	cbnz	r0, 8000e0c <_vfiprintf_r+0x12c>
 8000dd4:	06d1      	lsls	r1, r2, #27
 8000dd6:	bf44      	itt	mi
 8000dd8:	2320      	movmi	r3, #32
 8000dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dde:	0713      	lsls	r3, r2, #28
 8000de0:	bf44      	itt	mi
 8000de2:	232b      	movmi	r3, #43	; 0x2b
 8000de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000de8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dec:	2b2a      	cmp	r3, #42	; 0x2a
 8000dee:	d015      	beq.n	8000e1c <_vfiprintf_r+0x13c>
 8000df0:	4654      	mov	r4, sl
 8000df2:	2000      	movs	r0, #0
 8000df4:	f04f 0c0a 	mov.w	ip, #10
 8000df8:	9a07      	ldr	r2, [sp, #28]
 8000dfa:	4621      	mov	r1, r4
 8000dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e00:	3b30      	subs	r3, #48	; 0x30
 8000e02:	2b09      	cmp	r3, #9
 8000e04:	d94e      	bls.n	8000ea4 <_vfiprintf_r+0x1c4>
 8000e06:	b1b0      	cbz	r0, 8000e36 <_vfiprintf_r+0x156>
 8000e08:	9207      	str	r2, [sp, #28]
 8000e0a:	e014      	b.n	8000e36 <_vfiprintf_r+0x156>
 8000e0c:	eba0 0308 	sub.w	r3, r0, r8
 8000e10:	fa09 f303 	lsl.w	r3, r9, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	46a2      	mov	sl, r4
 8000e18:	9304      	str	r3, [sp, #16]
 8000e1a:	e7d2      	b.n	8000dc2 <_vfiprintf_r+0xe2>
 8000e1c:	9b03      	ldr	r3, [sp, #12]
 8000e1e:	1d19      	adds	r1, r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	9103      	str	r1, [sp, #12]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bfbb      	ittet	lt
 8000e28:	425b      	neglt	r3, r3
 8000e2a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e2e:	9307      	strge	r3, [sp, #28]
 8000e30:	9307      	strlt	r3, [sp, #28]
 8000e32:	bfb8      	it	lt
 8000e34:	9204      	strlt	r2, [sp, #16]
 8000e36:	7823      	ldrb	r3, [r4, #0]
 8000e38:	2b2e      	cmp	r3, #46	; 0x2e
 8000e3a:	d10c      	bne.n	8000e56 <_vfiprintf_r+0x176>
 8000e3c:	7863      	ldrb	r3, [r4, #1]
 8000e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e40:	d135      	bne.n	8000eae <_vfiprintf_r+0x1ce>
 8000e42:	9b03      	ldr	r3, [sp, #12]
 8000e44:	3402      	adds	r4, #2
 8000e46:	1d1a      	adds	r2, r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	9203      	str	r2, [sp, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	bfb8      	it	lt
 8000e50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000e54:	9305      	str	r3, [sp, #20]
 8000e56:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000f30 <_vfiprintf_r+0x250>
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4650      	mov	r0, sl
 8000e5e:	7821      	ldrb	r1, [r4, #0]
 8000e60:	f000 fc78 	bl	8001754 <memchr>
 8000e64:	b140      	cbz	r0, 8000e78 <_vfiprintf_r+0x198>
 8000e66:	2340      	movs	r3, #64	; 0x40
 8000e68:	eba0 000a 	sub.w	r0, r0, sl
 8000e6c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e70:	9b04      	ldr	r3, [sp, #16]
 8000e72:	3401      	adds	r4, #1
 8000e74:	4303      	orrs	r3, r0
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e7c:	2206      	movs	r2, #6
 8000e7e:	482d      	ldr	r0, [pc, #180]	; (8000f34 <_vfiprintf_r+0x254>)
 8000e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e84:	f000 fc66 	bl	8001754 <memchr>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d03f      	beq.n	8000f0c <_vfiprintf_r+0x22c>
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <_vfiprintf_r+0x258>)
 8000e8e:	bb1b      	cbnz	r3, 8000ed8 <_vfiprintf_r+0x1f8>
 8000e90:	9b03      	ldr	r3, [sp, #12]
 8000e92:	3307      	adds	r3, #7
 8000e94:	f023 0307 	bic.w	r3, r3, #7
 8000e98:	3308      	adds	r3, #8
 8000e9a:	9303      	str	r3, [sp, #12]
 8000e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e9e:	443b      	add	r3, r7
 8000ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ea2:	e767      	b.n	8000d74 <_vfiprintf_r+0x94>
 8000ea4:	460c      	mov	r4, r1
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eac:	e7a5      	b.n	8000dfa <_vfiprintf_r+0x11a>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f04f 0c0a 	mov.w	ip, #10
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	3401      	adds	r4, #1
 8000eb8:	9305      	str	r3, [sp, #20]
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ec0:	3a30      	subs	r2, #48	; 0x30
 8000ec2:	2a09      	cmp	r2, #9
 8000ec4:	d903      	bls.n	8000ece <_vfiprintf_r+0x1ee>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0c5      	beq.n	8000e56 <_vfiprintf_r+0x176>
 8000eca:	9105      	str	r1, [sp, #20]
 8000ecc:	e7c3      	b.n	8000e56 <_vfiprintf_r+0x176>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ed6:	e7f0      	b.n	8000eba <_vfiprintf_r+0x1da>
 8000ed8:	ab03      	add	r3, sp, #12
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	462a      	mov	r2, r5
 8000ede:	4630      	mov	r0, r6
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <_vfiprintf_r+0x25c>)
 8000ee2:	a904      	add	r1, sp, #16
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	4607      	mov	r7, r0
 8000eea:	1c78      	adds	r0, r7, #1
 8000eec:	d1d6      	bne.n	8000e9c <_vfiprintf_r+0x1bc>
 8000eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ef0:	07d9      	lsls	r1, r3, #31
 8000ef2:	d405      	bmi.n	8000f00 <_vfiprintf_r+0x220>
 8000ef4:	89ab      	ldrh	r3, [r5, #12]
 8000ef6:	059a      	lsls	r2, r3, #22
 8000ef8:	d402      	bmi.n	8000f00 <_vfiprintf_r+0x220>
 8000efa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000efc:	f7ff fde3 	bl	8000ac6 <__retarget_lock_release_recursive>
 8000f00:	89ab      	ldrh	r3, [r5, #12]
 8000f02:	065b      	lsls	r3, r3, #25
 8000f04:	f53f af12 	bmi.w	8000d2c <_vfiprintf_r+0x4c>
 8000f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f0a:	e711      	b.n	8000d30 <_vfiprintf_r+0x50>
 8000f0c:	ab03      	add	r3, sp, #12
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	462a      	mov	r2, r5
 8000f12:	4630      	mov	r0, r6
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <_vfiprintf_r+0x25c>)
 8000f16:	a904      	add	r1, sp, #16
 8000f18:	f000 f882 	bl	8001020 <_printf_i>
 8000f1c:	e7e4      	b.n	8000ee8 <_vfiprintf_r+0x208>
 8000f1e:	bf00      	nop
 8000f20:	080019c0 	.word	0x080019c0
 8000f24:	080019e0 	.word	0x080019e0
 8000f28:	080019a0 	.word	0x080019a0
 8000f2c:	08001a00 	.word	0x08001a00
 8000f30:	08001a06 	.word	0x08001a06
 8000f34:	08001a0a 	.word	0x08001a0a
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	08000cbb 	.word	0x08000cbb

08000f40 <_printf_common>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	4616      	mov	r6, r2
 8000f46:	4699      	mov	r9, r3
 8000f48:	688a      	ldr	r2, [r1, #8]
 8000f4a:	690b      	ldr	r3, [r1, #16]
 8000f4c:	4607      	mov	r7, r0
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	bfb8      	it	lt
 8000f52:	4613      	movlt	r3, r2
 8000f54:	6033      	str	r3, [r6, #0]
 8000f56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f60:	b10a      	cbz	r2, 8000f66 <_printf_common+0x26>
 8000f62:	3301      	adds	r3, #1
 8000f64:	6033      	str	r3, [r6, #0]
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	0699      	lsls	r1, r3, #26
 8000f6a:	bf42      	ittt	mi
 8000f6c:	6833      	ldrmi	r3, [r6, #0]
 8000f6e:	3302      	addmi	r3, #2
 8000f70:	6033      	strmi	r3, [r6, #0]
 8000f72:	6825      	ldr	r5, [r4, #0]
 8000f74:	f015 0506 	ands.w	r5, r5, #6
 8000f78:	d106      	bne.n	8000f88 <_printf_common+0x48>
 8000f7a:	f104 0a19 	add.w	sl, r4, #25
 8000f7e:	68e3      	ldr	r3, [r4, #12]
 8000f80:	6832      	ldr	r2, [r6, #0]
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	42ab      	cmp	r3, r5
 8000f86:	dc28      	bgt.n	8000fda <_printf_common+0x9a>
 8000f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f8c:	1e13      	subs	r3, r2, #0
 8000f8e:	6822      	ldr	r2, [r4, #0]
 8000f90:	bf18      	it	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	0692      	lsls	r2, r2, #26
 8000f96:	d42d      	bmi.n	8000ff4 <_printf_common+0xb4>
 8000f98:	4649      	mov	r1, r9
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fa0:	47c0      	blx	r8
 8000fa2:	3001      	adds	r0, #1
 8000fa4:	d020      	beq.n	8000fe8 <_printf_common+0xa8>
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	68e5      	ldr	r5, [r4, #12]
 8000faa:	f003 0306 	and.w	r3, r3, #6
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf18      	it	ne
 8000fb2:	2500      	movne	r5, #0
 8000fb4:	6832      	ldr	r2, [r6, #0]
 8000fb6:	f04f 0600 	mov.w	r6, #0
 8000fba:	68a3      	ldr	r3, [r4, #8]
 8000fbc:	bf08      	it	eq
 8000fbe:	1aad      	subeq	r5, r5, r2
 8000fc0:	6922      	ldr	r2, [r4, #16]
 8000fc2:	bf08      	it	eq
 8000fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	bfc4      	itt	gt
 8000fcc:	1a9b      	subgt	r3, r3, r2
 8000fce:	18ed      	addgt	r5, r5, r3
 8000fd0:	341a      	adds	r4, #26
 8000fd2:	42b5      	cmp	r5, r6
 8000fd4:	d11a      	bne.n	800100c <_printf_common+0xcc>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e008      	b.n	8000fec <_printf_common+0xac>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4652      	mov	r2, sl
 8000fde:	4649      	mov	r1, r9
 8000fe0:	4638      	mov	r0, r7
 8000fe2:	47c0      	blx	r8
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d103      	bne.n	8000ff0 <_printf_common+0xb0>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff0:	3501      	adds	r5, #1
 8000ff2:	e7c4      	b.n	8000f7e <_printf_common+0x3e>
 8000ff4:	2030      	movs	r0, #48	; 0x30
 8000ff6:	18e1      	adds	r1, r4, r3
 8000ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001002:	4422      	add	r2, r4
 8001004:	3302      	adds	r3, #2
 8001006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800100a:	e7c5      	b.n	8000f98 <_printf_common+0x58>
 800100c:	2301      	movs	r3, #1
 800100e:	4622      	mov	r2, r4
 8001010:	4649      	mov	r1, r9
 8001012:	4638      	mov	r0, r7
 8001014:	47c0      	blx	r8
 8001016:	3001      	adds	r0, #1
 8001018:	d0e6      	beq.n	8000fe8 <_printf_common+0xa8>
 800101a:	3601      	adds	r6, #1
 800101c:	e7d9      	b.n	8000fd2 <_printf_common+0x92>
	...

08001020 <_printf_i>:
 8001020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	7e0f      	ldrb	r7, [r1, #24]
 8001026:	4691      	mov	r9, r2
 8001028:	2f78      	cmp	r7, #120	; 0x78
 800102a:	4680      	mov	r8, r0
 800102c:	460c      	mov	r4, r1
 800102e:	469a      	mov	sl, r3
 8001030:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001036:	d807      	bhi.n	8001048 <_printf_i+0x28>
 8001038:	2f62      	cmp	r7, #98	; 0x62
 800103a:	d80a      	bhi.n	8001052 <_printf_i+0x32>
 800103c:	2f00      	cmp	r7, #0
 800103e:	f000 80d9 	beq.w	80011f4 <_printf_i+0x1d4>
 8001042:	2f58      	cmp	r7, #88	; 0x58
 8001044:	f000 80a4 	beq.w	8001190 <_printf_i+0x170>
 8001048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800104c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001050:	e03a      	b.n	80010c8 <_printf_i+0xa8>
 8001052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001056:	2b15      	cmp	r3, #21
 8001058:	d8f6      	bhi.n	8001048 <_printf_i+0x28>
 800105a:	a101      	add	r1, pc, #4	; (adr r1, 8001060 <_printf_i+0x40>)
 800105c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001060:	080010b9 	.word	0x080010b9
 8001064:	080010cd 	.word	0x080010cd
 8001068:	08001049 	.word	0x08001049
 800106c:	08001049 	.word	0x08001049
 8001070:	08001049 	.word	0x08001049
 8001074:	08001049 	.word	0x08001049
 8001078:	080010cd 	.word	0x080010cd
 800107c:	08001049 	.word	0x08001049
 8001080:	08001049 	.word	0x08001049
 8001084:	08001049 	.word	0x08001049
 8001088:	08001049 	.word	0x08001049
 800108c:	080011db 	.word	0x080011db
 8001090:	080010fd 	.word	0x080010fd
 8001094:	080011bd 	.word	0x080011bd
 8001098:	08001049 	.word	0x08001049
 800109c:	08001049 	.word	0x08001049
 80010a0:	080011fd 	.word	0x080011fd
 80010a4:	08001049 	.word	0x08001049
 80010a8:	080010fd 	.word	0x080010fd
 80010ac:	08001049 	.word	0x08001049
 80010b0:	08001049 	.word	0x08001049
 80010b4:	080011c5 	.word	0x080011c5
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	602a      	str	r2, [r5, #0]
 80010c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0a4      	b.n	8001216 <_printf_i+0x1f6>
 80010cc:	6820      	ldr	r0, [r4, #0]
 80010ce:	6829      	ldr	r1, [r5, #0]
 80010d0:	0606      	lsls	r6, r0, #24
 80010d2:	f101 0304 	add.w	r3, r1, #4
 80010d6:	d50a      	bpl.n	80010ee <_printf_i+0xce>
 80010d8:	680e      	ldr	r6, [r1, #0]
 80010da:	602b      	str	r3, [r5, #0]
 80010dc:	2e00      	cmp	r6, #0
 80010de:	da03      	bge.n	80010e8 <_printf_i+0xc8>
 80010e0:	232d      	movs	r3, #45	; 0x2d
 80010e2:	4276      	negs	r6, r6
 80010e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010e8:	230a      	movs	r3, #10
 80010ea:	485e      	ldr	r0, [pc, #376]	; (8001264 <_printf_i+0x244>)
 80010ec:	e019      	b.n	8001122 <_printf_i+0x102>
 80010ee:	680e      	ldr	r6, [r1, #0]
 80010f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80010f4:	602b      	str	r3, [r5, #0]
 80010f6:	bf18      	it	ne
 80010f8:	b236      	sxthne	r6, r6
 80010fa:	e7ef      	b.n	80010dc <_printf_i+0xbc>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	1d19      	adds	r1, r3, #4
 8001102:	6029      	str	r1, [r5, #0]
 8001104:	0601      	lsls	r1, r0, #24
 8001106:	d501      	bpl.n	800110c <_printf_i+0xec>
 8001108:	681e      	ldr	r6, [r3, #0]
 800110a:	e002      	b.n	8001112 <_printf_i+0xf2>
 800110c:	0646      	lsls	r6, r0, #25
 800110e:	d5fb      	bpl.n	8001108 <_printf_i+0xe8>
 8001110:	881e      	ldrh	r6, [r3, #0]
 8001112:	2f6f      	cmp	r7, #111	; 0x6f
 8001114:	bf0c      	ite	eq
 8001116:	2308      	moveq	r3, #8
 8001118:	230a      	movne	r3, #10
 800111a:	4852      	ldr	r0, [pc, #328]	; (8001264 <_printf_i+0x244>)
 800111c:	2100      	movs	r1, #0
 800111e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001122:	6865      	ldr	r5, [r4, #4]
 8001124:	2d00      	cmp	r5, #0
 8001126:	bfa8      	it	ge
 8001128:	6821      	ldrge	r1, [r4, #0]
 800112a:	60a5      	str	r5, [r4, #8]
 800112c:	bfa4      	itt	ge
 800112e:	f021 0104 	bicge.w	r1, r1, #4
 8001132:	6021      	strge	r1, [r4, #0]
 8001134:	b90e      	cbnz	r6, 800113a <_printf_i+0x11a>
 8001136:	2d00      	cmp	r5, #0
 8001138:	d04d      	beq.n	80011d6 <_printf_i+0x1b6>
 800113a:	4615      	mov	r5, r2
 800113c:	fbb6 f1f3 	udiv	r1, r6, r3
 8001140:	fb03 6711 	mls	r7, r3, r1, r6
 8001144:	5dc7      	ldrb	r7, [r0, r7]
 8001146:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800114a:	4637      	mov	r7, r6
 800114c:	42bb      	cmp	r3, r7
 800114e:	460e      	mov	r6, r1
 8001150:	d9f4      	bls.n	800113c <_printf_i+0x11c>
 8001152:	2b08      	cmp	r3, #8
 8001154:	d10b      	bne.n	800116e <_printf_i+0x14e>
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	07de      	lsls	r6, r3, #31
 800115a:	d508      	bpl.n	800116e <_printf_i+0x14e>
 800115c:	6923      	ldr	r3, [r4, #16]
 800115e:	6861      	ldr	r1, [r4, #4]
 8001160:	4299      	cmp	r1, r3
 8001162:	bfde      	ittt	le
 8001164:	2330      	movle	r3, #48	; 0x30
 8001166:	f805 3c01 	strble.w	r3, [r5, #-1]
 800116a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800116e:	1b52      	subs	r2, r2, r5
 8001170:	6122      	str	r2, [r4, #16]
 8001172:	464b      	mov	r3, r9
 8001174:	4621      	mov	r1, r4
 8001176:	4640      	mov	r0, r8
 8001178:	f8cd a000 	str.w	sl, [sp]
 800117c:	aa03      	add	r2, sp, #12
 800117e:	f7ff fedf 	bl	8000f40 <_printf_common>
 8001182:	3001      	adds	r0, #1
 8001184:	d14c      	bne.n	8001220 <_printf_i+0x200>
 8001186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800118a:	b004      	add	sp, #16
 800118c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001190:	4834      	ldr	r0, [pc, #208]	; (8001264 <_printf_i+0x244>)
 8001192:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001196:	6829      	ldr	r1, [r5, #0]
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	f851 6b04 	ldr.w	r6, [r1], #4
 800119e:	6029      	str	r1, [r5, #0]
 80011a0:	061d      	lsls	r5, r3, #24
 80011a2:	d514      	bpl.n	80011ce <_printf_i+0x1ae>
 80011a4:	07df      	lsls	r7, r3, #31
 80011a6:	bf44      	itt	mi
 80011a8:	f043 0320 	orrmi.w	r3, r3, #32
 80011ac:	6023      	strmi	r3, [r4, #0]
 80011ae:	b91e      	cbnz	r6, 80011b8 <_printf_i+0x198>
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	f023 0320 	bic.w	r3, r3, #32
 80011b6:	6023      	str	r3, [r4, #0]
 80011b8:	2310      	movs	r3, #16
 80011ba:	e7af      	b.n	800111c <_printf_i+0xfc>
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	f043 0320 	orr.w	r3, r3, #32
 80011c2:	6023      	str	r3, [r4, #0]
 80011c4:	2378      	movs	r3, #120	; 0x78
 80011c6:	4828      	ldr	r0, [pc, #160]	; (8001268 <_printf_i+0x248>)
 80011c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011cc:	e7e3      	b.n	8001196 <_printf_i+0x176>
 80011ce:	0659      	lsls	r1, r3, #25
 80011d0:	bf48      	it	mi
 80011d2:	b2b6      	uxthmi	r6, r6
 80011d4:	e7e6      	b.n	80011a4 <_printf_i+0x184>
 80011d6:	4615      	mov	r5, r2
 80011d8:	e7bb      	b.n	8001152 <_printf_i+0x132>
 80011da:	682b      	ldr	r3, [r5, #0]
 80011dc:	6826      	ldr	r6, [r4, #0]
 80011de:	1d18      	adds	r0, r3, #4
 80011e0:	6961      	ldr	r1, [r4, #20]
 80011e2:	6028      	str	r0, [r5, #0]
 80011e4:	0635      	lsls	r5, r6, #24
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	d501      	bpl.n	80011ee <_printf_i+0x1ce>
 80011ea:	6019      	str	r1, [r3, #0]
 80011ec:	e002      	b.n	80011f4 <_printf_i+0x1d4>
 80011ee:	0670      	lsls	r0, r6, #25
 80011f0:	d5fb      	bpl.n	80011ea <_printf_i+0x1ca>
 80011f2:	8019      	strh	r1, [r3, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	4615      	mov	r5, r2
 80011f8:	6123      	str	r3, [r4, #16]
 80011fa:	e7ba      	b.n	8001172 <_printf_i+0x152>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	2100      	movs	r1, #0
 8001200:	1d1a      	adds	r2, r3, #4
 8001202:	602a      	str	r2, [r5, #0]
 8001204:	681d      	ldr	r5, [r3, #0]
 8001206:	6862      	ldr	r2, [r4, #4]
 8001208:	4628      	mov	r0, r5
 800120a:	f000 faa3 	bl	8001754 <memchr>
 800120e:	b108      	cbz	r0, 8001214 <_printf_i+0x1f4>
 8001210:	1b40      	subs	r0, r0, r5
 8001212:	6060      	str	r0, [r4, #4]
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	6123      	str	r3, [r4, #16]
 8001218:	2300      	movs	r3, #0
 800121a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800121e:	e7a8      	b.n	8001172 <_printf_i+0x152>
 8001220:	462a      	mov	r2, r5
 8001222:	4649      	mov	r1, r9
 8001224:	4640      	mov	r0, r8
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	47d0      	blx	sl
 800122a:	3001      	adds	r0, #1
 800122c:	d0ab      	beq.n	8001186 <_printf_i+0x166>
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	079b      	lsls	r3, r3, #30
 8001232:	d413      	bmi.n	800125c <_printf_i+0x23c>
 8001234:	68e0      	ldr	r0, [r4, #12]
 8001236:	9b03      	ldr	r3, [sp, #12]
 8001238:	4298      	cmp	r0, r3
 800123a:	bfb8      	it	lt
 800123c:	4618      	movlt	r0, r3
 800123e:	e7a4      	b.n	800118a <_printf_i+0x16a>
 8001240:	2301      	movs	r3, #1
 8001242:	4632      	mov	r2, r6
 8001244:	4649      	mov	r1, r9
 8001246:	4640      	mov	r0, r8
 8001248:	47d0      	blx	sl
 800124a:	3001      	adds	r0, #1
 800124c:	d09b      	beq.n	8001186 <_printf_i+0x166>
 800124e:	3501      	adds	r5, #1
 8001250:	68e3      	ldr	r3, [r4, #12]
 8001252:	9903      	ldr	r1, [sp, #12]
 8001254:	1a5b      	subs	r3, r3, r1
 8001256:	42ab      	cmp	r3, r5
 8001258:	dcf2      	bgt.n	8001240 <_printf_i+0x220>
 800125a:	e7eb      	b.n	8001234 <_printf_i+0x214>
 800125c:	2500      	movs	r5, #0
 800125e:	f104 0619 	add.w	r6, r4, #25
 8001262:	e7f5      	b.n	8001250 <_printf_i+0x230>
 8001264:	08001a11 	.word	0x08001a11
 8001268:	08001a22 	.word	0x08001a22

0800126c <_sbrk_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	2300      	movs	r3, #0
 8001270:	4d05      	ldr	r5, [pc, #20]	; (8001288 <_sbrk_r+0x1c>)
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	602b      	str	r3, [r5, #0]
 8001278:	f7ff f9ae 	bl	80005d8 <_sbrk>
 800127c:	1c43      	adds	r3, r0, #1
 800127e:	d102      	bne.n	8001286 <_sbrk_r+0x1a>
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	b103      	cbz	r3, 8001286 <_sbrk_r+0x1a>
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	20000094 	.word	0x20000094

0800128c <__sread>:
 800128c:	b510      	push	{r4, lr}
 800128e:	460c      	mov	r4, r1
 8001290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001294:	f000 fa78 	bl	8001788 <_read_r>
 8001298:	2800      	cmp	r0, #0
 800129a:	bfab      	itete	ge
 800129c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800129e:	89a3      	ldrhlt	r3, [r4, #12]
 80012a0:	181b      	addge	r3, r3, r0
 80012a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012a6:	bfac      	ite	ge
 80012a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80012aa:	81a3      	strhlt	r3, [r4, #12]
 80012ac:	bd10      	pop	{r4, pc}

080012ae <__swrite>:
 80012ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b2:	461f      	mov	r7, r3
 80012b4:	898b      	ldrh	r3, [r1, #12]
 80012b6:	4605      	mov	r5, r0
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	460c      	mov	r4, r1
 80012bc:	4616      	mov	r6, r2
 80012be:	d505      	bpl.n	80012cc <__swrite+0x1e>
 80012c0:	2302      	movs	r3, #2
 80012c2:	2200      	movs	r2, #0
 80012c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c8:	f000 f9cc 	bl	8001664 <_lseek_r>
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	4632      	mov	r2, r6
 80012d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012d4:	81a3      	strh	r3, [r4, #12]
 80012d6:	4628      	mov	r0, r5
 80012d8:	463b      	mov	r3, r7
 80012da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012e2:	f000 b869 	b.w	80013b8 <_write_r>

080012e6 <__sseek>:
 80012e6:	b510      	push	{r4, lr}
 80012e8:	460c      	mov	r4, r1
 80012ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ee:	f000 f9b9 	bl	8001664 <_lseek_r>
 80012f2:	1c43      	adds	r3, r0, #1
 80012f4:	89a3      	ldrh	r3, [r4, #12]
 80012f6:	bf15      	itete	ne
 80012f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80012fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001302:	81a3      	strheq	r3, [r4, #12]
 8001304:	bf18      	it	ne
 8001306:	81a3      	strhne	r3, [r4, #12]
 8001308:	bd10      	pop	{r4, pc}

0800130a <__sclose>:
 800130a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800130e:	f000 b8db 	b.w	80014c8 <_close_r>
	...

08001314 <__swbuf_r>:
 8001314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001316:	460e      	mov	r6, r1
 8001318:	4614      	mov	r4, r2
 800131a:	4605      	mov	r5, r0
 800131c:	b118      	cbz	r0, 8001326 <__swbuf_r+0x12>
 800131e:	6983      	ldr	r3, [r0, #24]
 8001320:	b90b      	cbnz	r3, 8001326 <__swbuf_r+0x12>
 8001322:	f7ff fb1f 	bl	8000964 <__sinit>
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <__swbuf_r+0x98>)
 8001328:	429c      	cmp	r4, r3
 800132a:	d12b      	bne.n	8001384 <__swbuf_r+0x70>
 800132c:	686c      	ldr	r4, [r5, #4]
 800132e:	69a3      	ldr	r3, [r4, #24]
 8001330:	60a3      	str	r3, [r4, #8]
 8001332:	89a3      	ldrh	r3, [r4, #12]
 8001334:	071a      	lsls	r2, r3, #28
 8001336:	d52f      	bpl.n	8001398 <__swbuf_r+0x84>
 8001338:	6923      	ldr	r3, [r4, #16]
 800133a:	b36b      	cbz	r3, 8001398 <__swbuf_r+0x84>
 800133c:	6923      	ldr	r3, [r4, #16]
 800133e:	6820      	ldr	r0, [r4, #0]
 8001340:	b2f6      	uxtb	r6, r6
 8001342:	1ac0      	subs	r0, r0, r3
 8001344:	6963      	ldr	r3, [r4, #20]
 8001346:	4637      	mov	r7, r6
 8001348:	4283      	cmp	r3, r0
 800134a:	dc04      	bgt.n	8001356 <__swbuf_r+0x42>
 800134c:	4621      	mov	r1, r4
 800134e:	4628      	mov	r0, r5
 8001350:	f000 f94c 	bl	80015ec <_fflush_r>
 8001354:	bb30      	cbnz	r0, 80013a4 <__swbuf_r+0x90>
 8001356:	68a3      	ldr	r3, [r4, #8]
 8001358:	3001      	adds	r0, #1
 800135a:	3b01      	subs	r3, #1
 800135c:	60a3      	str	r3, [r4, #8]
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	6022      	str	r2, [r4, #0]
 8001364:	701e      	strb	r6, [r3, #0]
 8001366:	6963      	ldr	r3, [r4, #20]
 8001368:	4283      	cmp	r3, r0
 800136a:	d004      	beq.n	8001376 <__swbuf_r+0x62>
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	07db      	lsls	r3, r3, #31
 8001370:	d506      	bpl.n	8001380 <__swbuf_r+0x6c>
 8001372:	2e0a      	cmp	r6, #10
 8001374:	d104      	bne.n	8001380 <__swbuf_r+0x6c>
 8001376:	4621      	mov	r1, r4
 8001378:	4628      	mov	r0, r5
 800137a:	f000 f937 	bl	80015ec <_fflush_r>
 800137e:	b988      	cbnz	r0, 80013a4 <__swbuf_r+0x90>
 8001380:	4638      	mov	r0, r7
 8001382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <__swbuf_r+0x9c>)
 8001386:	429c      	cmp	r4, r3
 8001388:	d101      	bne.n	800138e <__swbuf_r+0x7a>
 800138a:	68ac      	ldr	r4, [r5, #8]
 800138c:	e7cf      	b.n	800132e <__swbuf_r+0x1a>
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <__swbuf_r+0xa0>)
 8001390:	429c      	cmp	r4, r3
 8001392:	bf08      	it	eq
 8001394:	68ec      	ldreq	r4, [r5, #12]
 8001396:	e7ca      	b.n	800132e <__swbuf_r+0x1a>
 8001398:	4621      	mov	r1, r4
 800139a:	4628      	mov	r0, r5
 800139c:	f000 f81e 	bl	80013dc <__swsetup_r>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d0cb      	beq.n	800133c <__swbuf_r+0x28>
 80013a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80013a8:	e7ea      	b.n	8001380 <__swbuf_r+0x6c>
 80013aa:	bf00      	nop
 80013ac:	080019c0 	.word	0x080019c0
 80013b0:	080019e0 	.word	0x080019e0
 80013b4:	080019a0 	.word	0x080019a0

080013b8 <_write_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4604      	mov	r4, r0
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	4d05      	ldr	r5, [pc, #20]	; (80013d8 <_write_r+0x20>)
 80013c4:	602a      	str	r2, [r5, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f7ff f8ba 	bl	8000540 <_write>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d102      	bne.n	80013d6 <_write_r+0x1e>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b103      	cbz	r3, 80013d6 <_write_r+0x1e>
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	20000094 	.word	0x20000094

080013dc <__swsetup_r>:
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <__swsetup_r+0xcc>)
 80013de:	b570      	push	{r4, r5, r6, lr}
 80013e0:	681d      	ldr	r5, [r3, #0]
 80013e2:	4606      	mov	r6, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	b125      	cbz	r5, 80013f2 <__swsetup_r+0x16>
 80013e8:	69ab      	ldr	r3, [r5, #24]
 80013ea:	b913      	cbnz	r3, 80013f2 <__swsetup_r+0x16>
 80013ec:	4628      	mov	r0, r5
 80013ee:	f7ff fab9 	bl	8000964 <__sinit>
 80013f2:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <__swsetup_r+0xd0>)
 80013f4:	429c      	cmp	r4, r3
 80013f6:	d10f      	bne.n	8001418 <__swsetup_r+0x3c>
 80013f8:	686c      	ldr	r4, [r5, #4]
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001400:	0719      	lsls	r1, r3, #28
 8001402:	d42c      	bmi.n	800145e <__swsetup_r+0x82>
 8001404:	06dd      	lsls	r5, r3, #27
 8001406:	d411      	bmi.n	800142c <__swsetup_r+0x50>
 8001408:	2309      	movs	r3, #9
 800140a:	6033      	str	r3, [r6, #0]
 800140c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	81a3      	strh	r3, [r4, #12]
 8001416:	e03e      	b.n	8001496 <__swsetup_r+0xba>
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <__swsetup_r+0xd4>)
 800141a:	429c      	cmp	r4, r3
 800141c:	d101      	bne.n	8001422 <__swsetup_r+0x46>
 800141e:	68ac      	ldr	r4, [r5, #8]
 8001420:	e7eb      	b.n	80013fa <__swsetup_r+0x1e>
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <__swsetup_r+0xd8>)
 8001424:	429c      	cmp	r4, r3
 8001426:	bf08      	it	eq
 8001428:	68ec      	ldreq	r4, [r5, #12]
 800142a:	e7e6      	b.n	80013fa <__swsetup_r+0x1e>
 800142c:	0758      	lsls	r0, r3, #29
 800142e:	d512      	bpl.n	8001456 <__swsetup_r+0x7a>
 8001430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001432:	b141      	cbz	r1, 8001446 <__swsetup_r+0x6a>
 8001434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001438:	4299      	cmp	r1, r3
 800143a:	d002      	beq.n	8001442 <__swsetup_r+0x66>
 800143c:	4630      	mov	r0, r6
 800143e:	f7ff fb4b 	bl	8000ad8 <_free_r>
 8001442:	2300      	movs	r3, #0
 8001444:	6363      	str	r3, [r4, #52]	; 0x34
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800144c:	81a3      	strh	r3, [r4, #12]
 800144e:	2300      	movs	r3, #0
 8001450:	6063      	str	r3, [r4, #4]
 8001452:	6923      	ldr	r3, [r4, #16]
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	89a3      	ldrh	r3, [r4, #12]
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	81a3      	strh	r3, [r4, #12]
 800145e:	6923      	ldr	r3, [r4, #16]
 8001460:	b94b      	cbnz	r3, 8001476 <__swsetup_r+0x9a>
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146c:	d003      	beq.n	8001476 <__swsetup_r+0x9a>
 800146e:	4621      	mov	r1, r4
 8001470:	4630      	mov	r0, r6
 8001472:	f000 f92f 	bl	80016d4 <__smakebuf_r>
 8001476:	89a0      	ldrh	r0, [r4, #12]
 8001478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800147c:	f010 0301 	ands.w	r3, r0, #1
 8001480:	d00a      	beq.n	8001498 <__swsetup_r+0xbc>
 8001482:	2300      	movs	r3, #0
 8001484:	60a3      	str	r3, [r4, #8]
 8001486:	6963      	ldr	r3, [r4, #20]
 8001488:	425b      	negs	r3, r3
 800148a:	61a3      	str	r3, [r4, #24]
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	b943      	cbnz	r3, 80014a2 <__swsetup_r+0xc6>
 8001490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001494:	d1ba      	bne.n	800140c <__swsetup_r+0x30>
 8001496:	bd70      	pop	{r4, r5, r6, pc}
 8001498:	0781      	lsls	r1, r0, #30
 800149a:	bf58      	it	pl
 800149c:	6963      	ldrpl	r3, [r4, #20]
 800149e:	60a3      	str	r3, [r4, #8]
 80014a0:	e7f4      	b.n	800148c <__swsetup_r+0xb0>
 80014a2:	2000      	movs	r0, #0
 80014a4:	e7f7      	b.n	8001496 <__swsetup_r+0xba>
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000
 80014ac:	080019c0 	.word	0x080019c0
 80014b0:	080019e0 	.word	0x080019e0
 80014b4:	080019a0 	.word	0x080019a0

080014b8 <abort>:
 80014b8:	2006      	movs	r0, #6
 80014ba:	b508      	push	{r3, lr}
 80014bc:	f000 f99e 	bl	80017fc <raise>
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff f816 	bl	80004f2 <_exit>
	...

080014c8 <_close_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	2300      	movs	r3, #0
 80014cc:	4d05      	ldr	r5, [pc, #20]	; (80014e4 <_close_r+0x1c>)
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	602b      	str	r3, [r5, #0]
 80014d4:	f7ff f850 	bl	8000578 <_close>
 80014d8:	1c43      	adds	r3, r0, #1
 80014da:	d102      	bne.n	80014e2 <_close_r+0x1a>
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	b103      	cbz	r3, 80014e2 <_close_r+0x1a>
 80014e0:	6023      	str	r3, [r4, #0]
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	20000094 	.word	0x20000094

080014e8 <__sflush_r>:
 80014e8:	898a      	ldrh	r2, [r1, #12]
 80014ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ec:	4605      	mov	r5, r0
 80014ee:	0710      	lsls	r0, r2, #28
 80014f0:	460c      	mov	r4, r1
 80014f2:	d457      	bmi.n	80015a4 <__sflush_r+0xbc>
 80014f4:	684b      	ldr	r3, [r1, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dc04      	bgt.n	8001504 <__sflush_r+0x1c>
 80014fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	dc01      	bgt.n	8001504 <__sflush_r+0x1c>
 8001500:	2000      	movs	r0, #0
 8001502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001506:	2e00      	cmp	r6, #0
 8001508:	d0fa      	beq.n	8001500 <__sflush_r+0x18>
 800150a:	2300      	movs	r3, #0
 800150c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001510:	682f      	ldr	r7, [r5, #0]
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	d032      	beq.n	800157c <__sflush_r+0x94>
 8001516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001518:	89a3      	ldrh	r3, [r4, #12]
 800151a:	075a      	lsls	r2, r3, #29
 800151c:	d505      	bpl.n	800152a <__sflush_r+0x42>
 800151e:	6863      	ldr	r3, [r4, #4]
 8001520:	1ac0      	subs	r0, r0, r3
 8001522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001524:	b10b      	cbz	r3, 800152a <__sflush_r+0x42>
 8001526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001528:	1ac0      	subs	r0, r0, r3
 800152a:	2300      	movs	r3, #0
 800152c:	4602      	mov	r2, r0
 800152e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001530:	4628      	mov	r0, r5
 8001532:	6a21      	ldr	r1, [r4, #32]
 8001534:	47b0      	blx	r6
 8001536:	1c43      	adds	r3, r0, #1
 8001538:	89a3      	ldrh	r3, [r4, #12]
 800153a:	d106      	bne.n	800154a <__sflush_r+0x62>
 800153c:	6829      	ldr	r1, [r5, #0]
 800153e:	291d      	cmp	r1, #29
 8001540:	d82c      	bhi.n	800159c <__sflush_r+0xb4>
 8001542:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <__sflush_r+0x100>)
 8001544:	40ca      	lsrs	r2, r1
 8001546:	07d6      	lsls	r6, r2, #31
 8001548:	d528      	bpl.n	800159c <__sflush_r+0xb4>
 800154a:	2200      	movs	r2, #0
 800154c:	6062      	str	r2, [r4, #4]
 800154e:	6922      	ldr	r2, [r4, #16]
 8001550:	04d9      	lsls	r1, r3, #19
 8001552:	6022      	str	r2, [r4, #0]
 8001554:	d504      	bpl.n	8001560 <__sflush_r+0x78>
 8001556:	1c42      	adds	r2, r0, #1
 8001558:	d101      	bne.n	800155e <__sflush_r+0x76>
 800155a:	682b      	ldr	r3, [r5, #0]
 800155c:	b903      	cbnz	r3, 8001560 <__sflush_r+0x78>
 800155e:	6560      	str	r0, [r4, #84]	; 0x54
 8001560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001562:	602f      	str	r7, [r5, #0]
 8001564:	2900      	cmp	r1, #0
 8001566:	d0cb      	beq.n	8001500 <__sflush_r+0x18>
 8001568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800156c:	4299      	cmp	r1, r3
 800156e:	d002      	beq.n	8001576 <__sflush_r+0x8e>
 8001570:	4628      	mov	r0, r5
 8001572:	f7ff fab1 	bl	8000ad8 <_free_r>
 8001576:	2000      	movs	r0, #0
 8001578:	6360      	str	r0, [r4, #52]	; 0x34
 800157a:	e7c2      	b.n	8001502 <__sflush_r+0x1a>
 800157c:	6a21      	ldr	r1, [r4, #32]
 800157e:	2301      	movs	r3, #1
 8001580:	4628      	mov	r0, r5
 8001582:	47b0      	blx	r6
 8001584:	1c41      	adds	r1, r0, #1
 8001586:	d1c7      	bne.n	8001518 <__sflush_r+0x30>
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0c4      	beq.n	8001518 <__sflush_r+0x30>
 800158e:	2b1d      	cmp	r3, #29
 8001590:	d001      	beq.n	8001596 <__sflush_r+0xae>
 8001592:	2b16      	cmp	r3, #22
 8001594:	d101      	bne.n	800159a <__sflush_r+0xb2>
 8001596:	602f      	str	r7, [r5, #0]
 8001598:	e7b2      	b.n	8001500 <__sflush_r+0x18>
 800159a:	89a3      	ldrh	r3, [r4, #12]
 800159c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a0:	81a3      	strh	r3, [r4, #12]
 80015a2:	e7ae      	b.n	8001502 <__sflush_r+0x1a>
 80015a4:	690f      	ldr	r7, [r1, #16]
 80015a6:	2f00      	cmp	r7, #0
 80015a8:	d0aa      	beq.n	8001500 <__sflush_r+0x18>
 80015aa:	0793      	lsls	r3, r2, #30
 80015ac:	bf18      	it	ne
 80015ae:	2300      	movne	r3, #0
 80015b0:	680e      	ldr	r6, [r1, #0]
 80015b2:	bf08      	it	eq
 80015b4:	694b      	ldreq	r3, [r1, #20]
 80015b6:	1bf6      	subs	r6, r6, r7
 80015b8:	600f      	str	r7, [r1, #0]
 80015ba:	608b      	str	r3, [r1, #8]
 80015bc:	2e00      	cmp	r6, #0
 80015be:	dd9f      	ble.n	8001500 <__sflush_r+0x18>
 80015c0:	4633      	mov	r3, r6
 80015c2:	463a      	mov	r2, r7
 80015c4:	4628      	mov	r0, r5
 80015c6:	6a21      	ldr	r1, [r4, #32]
 80015c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80015cc:	47e0      	blx	ip
 80015ce:	2800      	cmp	r0, #0
 80015d0:	dc06      	bgt.n	80015e0 <__sflush_r+0xf8>
 80015d2:	89a3      	ldrh	r3, [r4, #12]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	e790      	b.n	8001502 <__sflush_r+0x1a>
 80015e0:	4407      	add	r7, r0
 80015e2:	1a36      	subs	r6, r6, r0
 80015e4:	e7ea      	b.n	80015bc <__sflush_r+0xd4>
 80015e6:	bf00      	nop
 80015e8:	20400001 	.word	0x20400001

080015ec <_fflush_r>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	690b      	ldr	r3, [r1, #16]
 80015f0:	4605      	mov	r5, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	b913      	cbnz	r3, 80015fc <_fflush_r+0x10>
 80015f6:	2500      	movs	r5, #0
 80015f8:	4628      	mov	r0, r5
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	b118      	cbz	r0, 8001606 <_fflush_r+0x1a>
 80015fe:	6983      	ldr	r3, [r0, #24]
 8001600:	b90b      	cbnz	r3, 8001606 <_fflush_r+0x1a>
 8001602:	f7ff f9af 	bl	8000964 <__sinit>
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <_fflush_r+0x6c>)
 8001608:	429c      	cmp	r4, r3
 800160a:	d11b      	bne.n	8001644 <_fflush_r+0x58>
 800160c:	686c      	ldr	r4, [r5, #4]
 800160e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0ef      	beq.n	80015f6 <_fflush_r+0xa>
 8001616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001618:	07d0      	lsls	r0, r2, #31
 800161a:	d404      	bmi.n	8001626 <_fflush_r+0x3a>
 800161c:	0599      	lsls	r1, r3, #22
 800161e:	d402      	bmi.n	8001626 <_fflush_r+0x3a>
 8001620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001622:	f7ff fa4f 	bl	8000ac4 <__retarget_lock_acquire_recursive>
 8001626:	4628      	mov	r0, r5
 8001628:	4621      	mov	r1, r4
 800162a:	f7ff ff5d 	bl	80014e8 <__sflush_r>
 800162e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001630:	4605      	mov	r5, r0
 8001632:	07da      	lsls	r2, r3, #31
 8001634:	d4e0      	bmi.n	80015f8 <_fflush_r+0xc>
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	059b      	lsls	r3, r3, #22
 800163a:	d4dd      	bmi.n	80015f8 <_fflush_r+0xc>
 800163c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800163e:	f7ff fa42 	bl	8000ac6 <__retarget_lock_release_recursive>
 8001642:	e7d9      	b.n	80015f8 <_fflush_r+0xc>
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <_fflush_r+0x70>)
 8001646:	429c      	cmp	r4, r3
 8001648:	d101      	bne.n	800164e <_fflush_r+0x62>
 800164a:	68ac      	ldr	r4, [r5, #8]
 800164c:	e7df      	b.n	800160e <_fflush_r+0x22>
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <_fflush_r+0x74>)
 8001650:	429c      	cmp	r4, r3
 8001652:	bf08      	it	eq
 8001654:	68ec      	ldreq	r4, [r5, #12]
 8001656:	e7da      	b.n	800160e <_fflush_r+0x22>
 8001658:	080019c0 	.word	0x080019c0
 800165c:	080019e0 	.word	0x080019e0
 8001660:	080019a0 	.word	0x080019a0

08001664 <_lseek_r>:
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4604      	mov	r4, r0
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	2200      	movs	r2, #0
 800166e:	4d05      	ldr	r5, [pc, #20]	; (8001684 <_lseek_r+0x20>)
 8001670:	602a      	str	r2, [r5, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	f7fe ffa4 	bl	80005c0 <_lseek>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d102      	bne.n	8001682 <_lseek_r+0x1e>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b103      	cbz	r3, 8001682 <_lseek_r+0x1e>
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	20000094 	.word	0x20000094

08001688 <__swhatbuf_r>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	460e      	mov	r6, r1
 800168c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001690:	4614      	mov	r4, r2
 8001692:	2900      	cmp	r1, #0
 8001694:	461d      	mov	r5, r3
 8001696:	b096      	sub	sp, #88	; 0x58
 8001698:	da08      	bge.n	80016ac <__swhatbuf_r+0x24>
 800169a:	2200      	movs	r2, #0
 800169c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80016a0:	602a      	str	r2, [r5, #0]
 80016a2:	061a      	lsls	r2, r3, #24
 80016a4:	d410      	bmi.n	80016c8 <__swhatbuf_r+0x40>
 80016a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016aa:	e00e      	b.n	80016ca <__swhatbuf_r+0x42>
 80016ac:	466a      	mov	r2, sp
 80016ae:	f000 f8c1 	bl	8001834 <_fstat_r>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	dbf1      	blt.n	800169a <__swhatbuf_r+0x12>
 80016b6:	9a01      	ldr	r2, [sp, #4]
 80016b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016c0:	425a      	negs	r2, r3
 80016c2:	415a      	adcs	r2, r3
 80016c4:	602a      	str	r2, [r5, #0]
 80016c6:	e7ee      	b.n	80016a6 <__swhatbuf_r+0x1e>
 80016c8:	2340      	movs	r3, #64	; 0x40
 80016ca:	2000      	movs	r0, #0
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	b016      	add	sp, #88	; 0x58
 80016d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080016d4 <__smakebuf_r>:
 80016d4:	898b      	ldrh	r3, [r1, #12]
 80016d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016d8:	079d      	lsls	r5, r3, #30
 80016da:	4606      	mov	r6, r0
 80016dc:	460c      	mov	r4, r1
 80016de:	d507      	bpl.n	80016f0 <__smakebuf_r+0x1c>
 80016e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016e4:	6023      	str	r3, [r4, #0]
 80016e6:	6123      	str	r3, [r4, #16]
 80016e8:	2301      	movs	r3, #1
 80016ea:	6163      	str	r3, [r4, #20]
 80016ec:	b002      	add	sp, #8
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
 80016f0:	466a      	mov	r2, sp
 80016f2:	ab01      	add	r3, sp, #4
 80016f4:	f7ff ffc8 	bl	8001688 <__swhatbuf_r>
 80016f8:	9900      	ldr	r1, [sp, #0]
 80016fa:	4605      	mov	r5, r0
 80016fc:	4630      	mov	r0, r6
 80016fe:	f7ff fa53 	bl	8000ba8 <_malloc_r>
 8001702:	b948      	cbnz	r0, 8001718 <__smakebuf_r+0x44>
 8001704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001708:	059a      	lsls	r2, r3, #22
 800170a:	d4ef      	bmi.n	80016ec <__smakebuf_r+0x18>
 800170c:	f023 0303 	bic.w	r3, r3, #3
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	81a3      	strh	r3, [r4, #12]
 8001716:	e7e3      	b.n	80016e0 <__smakebuf_r+0xc>
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <__smakebuf_r+0x7c>)
 800171a:	62b3      	str	r3, [r6, #40]	; 0x28
 800171c:	89a3      	ldrh	r3, [r4, #12]
 800171e:	6020      	str	r0, [r4, #0]
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	81a3      	strh	r3, [r4, #12]
 8001726:	9b00      	ldr	r3, [sp, #0]
 8001728:	6120      	str	r0, [r4, #16]
 800172a:	6163      	str	r3, [r4, #20]
 800172c:	9b01      	ldr	r3, [sp, #4]
 800172e:	b15b      	cbz	r3, 8001748 <__smakebuf_r+0x74>
 8001730:	4630      	mov	r0, r6
 8001732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001736:	f000 f88f 	bl	8001858 <_isatty_r>
 800173a:	b128      	cbz	r0, 8001748 <__smakebuf_r+0x74>
 800173c:	89a3      	ldrh	r3, [r4, #12]
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	81a3      	strh	r3, [r4, #12]
 8001748:	89a0      	ldrh	r0, [r4, #12]
 800174a:	4305      	orrs	r5, r0
 800174c:	81a5      	strh	r5, [r4, #12]
 800174e:	e7cd      	b.n	80016ec <__smakebuf_r+0x18>
 8001750:	080008fd 	.word	0x080008fd

08001754 <memchr>:
 8001754:	4603      	mov	r3, r0
 8001756:	b510      	push	{r4, lr}
 8001758:	b2c9      	uxtb	r1, r1
 800175a:	4402      	add	r2, r0
 800175c:	4293      	cmp	r3, r2
 800175e:	4618      	mov	r0, r3
 8001760:	d101      	bne.n	8001766 <memchr+0x12>
 8001762:	2000      	movs	r0, #0
 8001764:	e003      	b.n	800176e <memchr+0x1a>
 8001766:	7804      	ldrb	r4, [r0, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	428c      	cmp	r4, r1
 800176c:	d1f6      	bne.n	800175c <memchr+0x8>
 800176e:	bd10      	pop	{r4, pc}

08001770 <__malloc_lock>:
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <__malloc_lock+0x8>)
 8001772:	f7ff b9a7 	b.w	8000ac4 <__retarget_lock_acquire_recursive>
 8001776:	bf00      	nop
 8001778:	20000088 	.word	0x20000088

0800177c <__malloc_unlock>:
 800177c:	4801      	ldr	r0, [pc, #4]	; (8001784 <__malloc_unlock+0x8>)
 800177e:	f7ff b9a2 	b.w	8000ac6 <__retarget_lock_release_recursive>
 8001782:	bf00      	nop
 8001784:	20000088 	.word	0x20000088

08001788 <_read_r>:
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	2200      	movs	r2, #0
 8001792:	4d05      	ldr	r5, [pc, #20]	; (80017a8 <_read_r+0x20>)
 8001794:	602a      	str	r2, [r5, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	f7fe feb5 	bl	8000506 <_read>
 800179c:	1c43      	adds	r3, r0, #1
 800179e:	d102      	bne.n	80017a6 <_read_r+0x1e>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	b103      	cbz	r3, 80017a6 <_read_r+0x1e>
 80017a4:	6023      	str	r3, [r4, #0]
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	20000094 	.word	0x20000094

080017ac <_raise_r>:
 80017ac:	291f      	cmp	r1, #31
 80017ae:	b538      	push	{r3, r4, r5, lr}
 80017b0:	4604      	mov	r4, r0
 80017b2:	460d      	mov	r5, r1
 80017b4:	d904      	bls.n	80017c0 <_raise_r+0x14>
 80017b6:	2316      	movs	r3, #22
 80017b8:	6003      	str	r3, [r0, #0]
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017be:	bd38      	pop	{r3, r4, r5, pc}
 80017c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80017c2:	b112      	cbz	r2, 80017ca <_raise_r+0x1e>
 80017c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80017c8:	b94b      	cbnz	r3, 80017de <_raise_r+0x32>
 80017ca:	4620      	mov	r0, r4
 80017cc:	f000 f830 	bl	8001830 <_getpid_r>
 80017d0:	462a      	mov	r2, r5
 80017d2:	4601      	mov	r1, r0
 80017d4:	4620      	mov	r0, r4
 80017d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017da:	f000 b817 	b.w	800180c <_kill_r>
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d00a      	beq.n	80017f8 <_raise_r+0x4c>
 80017e2:	1c59      	adds	r1, r3, #1
 80017e4:	d103      	bne.n	80017ee <_raise_r+0x42>
 80017e6:	2316      	movs	r3, #22
 80017e8:	6003      	str	r3, [r0, #0]
 80017ea:	2001      	movs	r0, #1
 80017ec:	e7e7      	b.n	80017be <_raise_r+0x12>
 80017ee:	2400      	movs	r4, #0
 80017f0:	4628      	mov	r0, r5
 80017f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80017f6:	4798      	blx	r3
 80017f8:	2000      	movs	r0, #0
 80017fa:	e7e0      	b.n	80017be <_raise_r+0x12>

080017fc <raise>:
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <raise+0xc>)
 80017fe:	4601      	mov	r1, r0
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f7ff bfd3 	b.w	80017ac <_raise_r>
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000

0800180c <_kill_r>:
 800180c:	b538      	push	{r3, r4, r5, lr}
 800180e:	2300      	movs	r3, #0
 8001810:	4d06      	ldr	r5, [pc, #24]	; (800182c <_kill_r+0x20>)
 8001812:	4604      	mov	r4, r0
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	602b      	str	r3, [r5, #0]
 800181a:	f7fe fe5a 	bl	80004d2 <_kill>
 800181e:	1c43      	adds	r3, r0, #1
 8001820:	d102      	bne.n	8001828 <_kill_r+0x1c>
 8001822:	682b      	ldr	r3, [r5, #0]
 8001824:	b103      	cbz	r3, 8001828 <_kill_r+0x1c>
 8001826:	6023      	str	r3, [r4, #0]
 8001828:	bd38      	pop	{r3, r4, r5, pc}
 800182a:	bf00      	nop
 800182c:	20000094 	.word	0x20000094

08001830 <_getpid_r>:
 8001830:	f7fe be48 	b.w	80004c4 <_getpid>

08001834 <_fstat_r>:
 8001834:	b538      	push	{r3, r4, r5, lr}
 8001836:	2300      	movs	r3, #0
 8001838:	4d06      	ldr	r5, [pc, #24]	; (8001854 <_fstat_r+0x20>)
 800183a:	4604      	mov	r4, r0
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	602b      	str	r3, [r5, #0]
 8001842:	f7fe fea4 	bl	800058e <_fstat>
 8001846:	1c43      	adds	r3, r0, #1
 8001848:	d102      	bne.n	8001850 <_fstat_r+0x1c>
 800184a:	682b      	ldr	r3, [r5, #0]
 800184c:	b103      	cbz	r3, 8001850 <_fstat_r+0x1c>
 800184e:	6023      	str	r3, [r4, #0]
 8001850:	bd38      	pop	{r3, r4, r5, pc}
 8001852:	bf00      	nop
 8001854:	20000094 	.word	0x20000094

08001858 <_isatty_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	2300      	movs	r3, #0
 800185c:	4d05      	ldr	r5, [pc, #20]	; (8001874 <_isatty_r+0x1c>)
 800185e:	4604      	mov	r4, r0
 8001860:	4608      	mov	r0, r1
 8001862:	602b      	str	r3, [r5, #0]
 8001864:	f7fe fea2 	bl	80005ac <_isatty>
 8001868:	1c43      	adds	r3, r0, #1
 800186a:	d102      	bne.n	8001872 <_isatty_r+0x1a>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	b103      	cbz	r3, 8001872 <_isatty_r+0x1a>
 8001870:	6023      	str	r3, [r4, #0]
 8001872:	bd38      	pop	{r3, r4, r5, pc}
 8001874:	20000094 	.word	0x20000094

08001878 <_init>:
 8001878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187a:	bf00      	nop
 800187c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187e:	bc08      	pop	{r3}
 8001880:	469e      	mov	lr, r3
 8001882:	4770      	bx	lr

08001884 <_fini>:
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001886:	bf00      	nop
 8001888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188a:	bc08      	pop	{r3}
 800188c:	469e      	mov	lr, r3
 800188e:	4770      	bx	lr
