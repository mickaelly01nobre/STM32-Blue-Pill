
External_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003bc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f0  080004f0  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004f4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007d1  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a8  00000000  00000000  00001cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006a5  00000000  00000000  00011e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005484d  00000000  00000000  00012528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066d75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000108  00000000  00000000  00066db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00066ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004d4 	.word	0x080004d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004d4 	.word	0x080004d4

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	@ (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	@ (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <EXTI0_IRQHandler>:

/*
 * EXTI0 external interrupt handler
 */
void EXTI0_IRQHandler(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	GPIOB->ODR ^= (1<<8);
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <EXTI0_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4a05      	ldr	r2, [pc, #20]	@ (800021c <EXTI0_IRQHandler+0x20>)
 8000206:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 800020a:	60d3      	str	r3, [r2, #12]
	// Clear pending
	EXTI->PR = (1 << 0);
 800020c:	4b04      	ldr	r3, [pc, #16]	@ (8000220 <EXTI0_IRQHandler+0x24>)
 800020e:	2201      	movs	r2, #1
 8000210:	615a      	str	r2, [r3, #20]

}
 8000212:	bf00      	nop
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40010c00 	.word	0x40010c00
 8000220:	40010400 	.word	0x40010400

08000224 <EXTI1_IRQHandler>:
/*
 * EXTI1 external interrupt handler
 */

void EXTI1_IRQHandler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	// Do stuff
	GPIOB->ODR ^= (1 << 9);
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <EXTI1_IRQHandler+0x20>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <EXTI1_IRQHandler+0x20>)
 800022e:	f483 7300 	eor.w	r3, r3, #512	@ 0x200
 8000232:	60d3      	str	r3, [r2, #12]
	// Clear pending
	EXTI->PR = (1 << 1);
 8000234:	4b04      	ldr	r3, [pc, #16]	@ (8000248 <EXTI1_IRQHandler+0x24>)
 8000236:	2202      	movs	r2, #2
 8000238:	615a      	str	r2, [r3, #20]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40010400 	.word	0x40010400

0800024c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	// Do stuff
	GPIOB->ODR ^= (1 << 10);
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <EXTI2_IRQHandler+0x20>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <EXTI2_IRQHandler+0x20>)
 8000256:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 800025a:	60d3      	str	r3, [r2, #12]
	// Clear pending
	EXTI->PR = (1 << 2);
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <EXTI2_IRQHandler+0x24>)
 800025e:	2204      	movs	r2, #4
 8000260:	615a      	str	r2, [r3, #20]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40010c00 	.word	0x40010c00
 8000270:	40010400 	.word	0x40010400

08000274 <main>:


int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	 * Para habilitar o clock de cada periferico leia a secao 7.3.7.APB2 peripheral clock enable register (RCC_APB2ENR)
	 * Clock dos Perifericos
	 */

	//habilite para usa o GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 8000278:	4b6a      	ldr	r3, [pc, #424]	@ (8000424 <main+0x1b0>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a69      	ldr	r2, [pc, #420]	@ (8000424 <main+0x1b0>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6193      	str	r3, [r2, #24]

	//habilite para usa o GPIOA clock
	RCC->APB2ENR |= (1 << 2);
 8000284:	4b67      	ldr	r3, [pc, #412]	@ (8000424 <main+0x1b0>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a66      	ldr	r2, [pc, #408]	@ (8000424 <main+0x1b0>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]

	// B1
	////CNF0[3:2] = 10 e MODE0[1:0] = 00
	// 10: Input with pull-up / pull-down
	//2a. Reseta os bits [3:0]
	GPIOA->CRL &= 0xFFFFFFF0; // binario - 11111111111111111111111111110000
 8000290:	4b65      	ldr	r3, [pc, #404]	@ (8000428 <main+0x1b4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a64      	ldr	r2, [pc, #400]	@ (8000428 <main+0x1b4>)
 8000296:	f023 030f 	bic.w	r3, r3, #15
 800029a:	6013      	str	r3, [r2, #0]
	//2b. Seta o bit [3]
	GPIOA->CRL |= 0xFFFFFFF8;
 800029c:	4b62      	ldr	r3, [pc, #392]	@ (8000428 <main+0x1b4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a61      	ldr	r2, [pc, #388]	@ (8000428 <main+0x1b4>)
 80002a2:	f063 0307 	orn	r3, r3, #7
 80002a6:	6013      	str	r3, [r2, #0]

	//3. Configure the ODR (1-> Pull UP, 0-> Pull down)
	// Olha a tabela com essa especificacao -> Table 20. Port bit configuration table
	//Para habilita pull-up no Input precisa configurar o registrador ODR para 1
	GPIOA->ODR |= (1<<0);
 80002a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000428 <main+0x1b4>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a5e      	ldr	r2, [pc, #376]	@ (8000428 <main+0x1b4>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	60d3      	str	r3, [r2, #12]

	// B2
	////CNF1[7:6] = 10 e MODE1[5:4] = 00
	// 10: Input with pull-up / pull-down
	//2a. Reseta os bits [7:0]
	GPIOA->CRL &= 0xFFFFFF0F; // binario - 11111111111111111111111100001111
 80002b4:	4b5c      	ldr	r3, [pc, #368]	@ (8000428 <main+0x1b4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a5b      	ldr	r2, [pc, #364]	@ (8000428 <main+0x1b4>)
 80002ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002be:	6013      	str	r3, [r2, #0]
	//2b. Seta o bit [7]
	GPIOA->CRL |= 0xFFFFFF80;
 80002c0:	4b59      	ldr	r3, [pc, #356]	@ (8000428 <main+0x1b4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a58      	ldr	r2, [pc, #352]	@ (8000428 <main+0x1b4>)
 80002c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002ca:	6013      	str	r3, [r2, #0]

	//3. Configure the ODR (1-> Pull UP, 0-> Pull down)
	// Olha a tabela com essa especificacao -> Table 20. Port bit configuration table
	//Para habilita pull-up no Input precisa configurar o registrador ODR para 1
	GPIOA->ODR |= (1<<1);
 80002cc:	4b56      	ldr	r3, [pc, #344]	@ (8000428 <main+0x1b4>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a55      	ldr	r2, [pc, #340]	@ (8000428 <main+0x1b4>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	60d3      	str	r3, [r2, #12]

	// B3
	////CNF2[11:10] = 10 e MODE2[9:8] = 00
	// 10: Input with pull-up / pull-down
	//2a. Reseta os bits [7:0]
	GPIOA->CRL &= 0xFFFFF0FF; // binario - 11111111111111111111000011111111
 80002d8:	4b53      	ldr	r3, [pc, #332]	@ (8000428 <main+0x1b4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a52      	ldr	r2, [pc, #328]	@ (8000428 <main+0x1b4>)
 80002de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80002e2:	6013      	str	r3, [r2, #0]
	//2b. Seta o bit [7]
	GPIOA->CRL |= 0xFFFFF800;
 80002e4:	4b50      	ldr	r3, [pc, #320]	@ (8000428 <main+0x1b4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a4f      	ldr	r2, [pc, #316]	@ (8000428 <main+0x1b4>)
 80002ea:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 80002ee:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 80002f2:	6013      	str	r3, [r2, #0]

	//3. Configure the ODR (1-> Pull UP, 0-> Pull down)
	// Olha a tabela com essa especificacao -> Table 20. Port bit configuration table
	//Para habilita pull-up no Input precisa configurar o registrador ODR para 1
	GPIOA->ODR |= (1<<2);
 80002f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000428 <main+0x1b4>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a4b      	ldr	r2, [pc, #300]	@ (8000428 <main+0x1b4>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	60d3      	str	r3, [r2, #12]
		 * LED
		 *
	*/
	//LED1
	//CNF8[3:2] = 00 e MODE8[1:0] = 10
	GPIOB->CRH &= 0xFFFFFF0; // binario - 11111111111111111111111111110000
 8000300:	4b4a      	ldr	r3, [pc, #296]	@ (800042c <main+0x1b8>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a49      	ldr	r2, [pc, #292]	@ (800042c <main+0x1b8>)
 8000306:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800030a:	f023 030f 	bic.w	r3, r3, #15
 800030e:	6053      	str	r3, [r2, #4]
	//habilita o bit [1]
	GPIOB->CRH |= (1<<1);
 8000310:	4b46      	ldr	r3, [pc, #280]	@ (800042c <main+0x1b8>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4a45      	ldr	r2, [pc, #276]	@ (800042c <main+0x1b8>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin8
	GPIOB->ODR &= ~(1<<8);
 800031c:	4b43      	ldr	r3, [pc, #268]	@ (800042c <main+0x1b8>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a42      	ldr	r2, [pc, #264]	@ (800042c <main+0x1b8>)
 8000322:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000326:	60d3      	str	r3, [r2, #12]


	//LED2
	//CNF9[7:6] = 00 e MODE9[5:4] = 10
	GPIOB->CRH &= 0xFFFFF0F; // binario - 11111111111111111111111100001111
 8000328:	4b40      	ldr	r3, [pc, #256]	@ (800042c <main+0x1b8>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a3f      	ldr	r2, [pc, #252]	@ (800042c <main+0x1b8>)
 800032e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000336:	6053      	str	r3, [r2, #4]
	//habilita o bit [5]
	GPIOB->CRH |= (1<<5);
 8000338:	4b3c      	ldr	r3, [pc, #240]	@ (800042c <main+0x1b8>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	4a3b      	ldr	r2, [pc, #236]	@ (800042c <main+0x1b8>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin9
	GPIOB->ODR &= ~(1<<9);
 8000344:	4b39      	ldr	r3, [pc, #228]	@ (800042c <main+0x1b8>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a38      	ldr	r2, [pc, #224]	@ (800042c <main+0x1b8>)
 800034a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800034e:	60d3      	str	r3, [r2, #12]


	//LED3
	//CNF10[11:10] = 00 e MODE10[9:8] = 10
	GPIOB->CRH &= 0xFFFF0FF; // binario - 11111111111111111111000011111111
 8000350:	4b36      	ldr	r3, [pc, #216]	@ (800042c <main+0x1b8>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	4a35      	ldr	r2, [pc, #212]	@ (800042c <main+0x1b8>)
 8000356:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800035a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800035e:	6053      	str	r3, [r2, #4]
	//habilita o bit [5]
	GPIOB->CRH |= (1<<9);
 8000360:	4b32      	ldr	r3, [pc, #200]	@ (800042c <main+0x1b8>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4a31      	ldr	r2, [pc, #196]	@ (800042c <main+0x1b8>)
 8000366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800036a:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin9
	GPIOB->ODR &= ~(1<<10);
 800036c:	4b2f      	ldr	r3, [pc, #188]	@ (800042c <main+0x1b8>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a2e      	ldr	r2, [pc, #184]	@ (800042c <main+0x1b8>)
 8000372:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000376:	60d3      	str	r3, [r2, #12]

	********************************************************/

	//1. Enable the AFIO bit in RCC register
	// habilita o AFIO bit do RCC register na secao 8.3.7
	RCC->APB2ENR |= (1<<0);
 8000378:	4b2a      	ldr	r3, [pc, #168]	@ (8000424 <main+0x1b0>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a29      	ldr	r2, [pc, #164]	@ (8000424 <main+0x1b0>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6193      	str	r3, [r2, #24]

	//2. Configure the EXTI configuration Register in the AFIO
	// habilita AFIO na secao 9.4.3.External interrupt configuration register 1
	// habilita 0000: PA[x] pin
	// EXTI0
	AFIO->EXTICR[0] &= ~(0xf<<0);
 8000384:	4b2a      	ldr	r3, [pc, #168]	@ (8000430 <main+0x1bc>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a29      	ldr	r2, [pc, #164]	@ (8000430 <main+0x1bc>)
 800038a:	f023 030f 	bic.w	r3, r3, #15
 800038e:	6093      	str	r3, [r2, #8]

	// EXTI1
	AFIO->EXTICR[0] &= ~(0xf<<4);
 8000390:	4b27      	ldr	r3, [pc, #156]	@ (8000430 <main+0x1bc>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a26      	ldr	r2, [pc, #152]	@ (8000430 <main+0x1bc>)
 8000396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800039a:	6093      	str	r3, [r2, #8]

	// EXTI2
	AFIO->EXTICR[0] &= ~(0xf<<8);
 800039c:	4b24      	ldr	r3, [pc, #144]	@ (8000430 <main+0x1bc>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	4a23      	ldr	r2, [pc, #140]	@ (8000430 <main+0x1bc>)
 80003a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003a6:	6093      	str	r3, [r2, #8]

	//4. Configure the  Falling Edge Trigger
	// Para habilita a borda de descida utilize a secao 10.3.4 Falling trigger selection register (EXTI_FTSR)
	// habilite 1: Falling trigger enabled (for Event and Interrupt) for input line.
	//PINO A0
	EXTI->FTSR |= (1<<0);  // Enable Falling Edge Trigger
 80003a8:	4b22      	ldr	r3, [pc, #136]	@ (8000434 <main+0x1c0>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a21      	ldr	r2, [pc, #132]	@ (8000434 <main+0x1c0>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	60d3      	str	r3, [r2, #12]

	//PINO A1
	EXTI->FTSR |= (1<<1);  // Enable Falling Edge Trigger
 80003b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000434 <main+0x1c0>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000434 <main+0x1c0>)
 80003ba:	f043 0302 	orr.w	r3, r3, #2
 80003be:	60d3      	str	r3, [r2, #12]

	//PINO A2
	EXTI->FTSR |= (1<<2);  // Enable Falling Edge Trigger
 80003c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000434 <main+0x1c0>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000434 <main+0x1c0>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	60d3      	str	r3, [r2, #12]


	//3. Disable the EXTI Mask using Interrupt Mask Register (IMR)
	// Para desabilita a mascara de interrupcao utilize a secao e 10.3.1 Interrupt mask register (EXTI_IMR)
	// habilita 1: Interrupt request from Line x is not masked
	EXTI->IMR |= (1<<0); // Mask EXTI0
 80003cc:	4b19      	ldr	r3, [pc, #100]	@ (8000434 <main+0x1c0>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a18      	ldr	r2, [pc, #96]	@ (8000434 <main+0x1c0>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

	EXTI->IMR |= (1<<1); // Mask EXTI1
 80003d8:	4b16      	ldr	r3, [pc, #88]	@ (8000434 <main+0x1c0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a15      	ldr	r2, [pc, #84]	@ (8000434 <main+0x1c0>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6013      	str	r3, [r2, #0]

	EXTI->IMR |= (1<<2); // Mask EXTI2
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <main+0x1c0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a12      	ldr	r2, [pc, #72]	@ (8000434 <main+0x1c0>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6013      	str	r3, [r2, #0]

	//5. Set the Interrupt Priority
	NVIC_SetPriority(EXTI0_IRQn,1);
 80003f0:	2101      	movs	r1, #1
 80003f2:	2006      	movs	r0, #6
 80003f4:	f7ff fed8 	bl	80001a8 <__NVIC_SetPriority>

	//5. Set the Interrupt Priority
	NVIC_SetPriority(EXTI1_IRQn,2);
 80003f8:	2102      	movs	r1, #2
 80003fa:	2007      	movs	r0, #7
 80003fc:	f7ff fed4 	bl	80001a8 <__NVIC_SetPriority>

	//5. Set the Interrupt Priority
	NVIC_SetPriority(EXTI2_IRQn,3);
 8000400:	2103      	movs	r1, #3
 8000402:	2008      	movs	r0, #8
 8000404:	f7ff fed0 	bl	80001a8 <__NVIC_SetPriority>

	//6. Enable the interrupt
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000408:	2006      	movs	r0, #6
 800040a:	f7ff feb1 	bl	8000170 <__NVIC_EnableIRQ>

	//6. Enable the interrupt
	NVIC_EnableIRQ(EXTI1_IRQn);
 800040e:	2007      	movs	r0, #7
 8000410:	f7ff feae 	bl	8000170 <__NVIC_EnableIRQ>

	//6. Enable the interrupt
	NVIC_EnableIRQ(EXTI2_IRQn);
 8000414:	2008      	movs	r0, #8
 8000416:	f7ff feab 	bl	8000170 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800041a:	b662      	cpsie	i
}
 800041c:	bf00      	nop

	__enable_irq();


    /* Loop forever */
	for(;;);
 800041e:	bf00      	nop
 8000420:	e7fd      	b.n	800041e <main+0x1aa>
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	40010800 	.word	0x40010800
 800042c:	40010c00 	.word	0x40010c00
 8000430:	40010000 	.word	0x40010000
 8000434:	40010400 	.word	0x40010400

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	@ (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	@ (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	@ (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	@ (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	@ (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 f811 	bl	800048c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff ff03 	bl	8000274 <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	2000001c 	.word	0x2000001c

08000488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC1_2_IRQHandler>
	...

0800048c <__libc_init_array>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	2600      	movs	r6, #0
 8000490:	4d0c      	ldr	r5, [pc, #48]	@ (80004c4 <__libc_init_array+0x38>)
 8000492:	4c0d      	ldr	r4, [pc, #52]	@ (80004c8 <__libc_init_array+0x3c>)
 8000494:	1b64      	subs	r4, r4, r5
 8000496:	10a4      	asrs	r4, r4, #2
 8000498:	42a6      	cmp	r6, r4
 800049a:	d109      	bne.n	80004b0 <__libc_init_array+0x24>
 800049c:	f000 f81a 	bl	80004d4 <_init>
 80004a0:	2600      	movs	r6, #0
 80004a2:	4d0a      	ldr	r5, [pc, #40]	@ (80004cc <__libc_init_array+0x40>)
 80004a4:	4c0a      	ldr	r4, [pc, #40]	@ (80004d0 <__libc_init_array+0x44>)
 80004a6:	1b64      	subs	r4, r4, r5
 80004a8:	10a4      	asrs	r4, r4, #2
 80004aa:	42a6      	cmp	r6, r4
 80004ac:	d105      	bne.n	80004ba <__libc_init_array+0x2e>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b4:	4798      	blx	r3
 80004b6:	3601      	adds	r6, #1
 80004b8:	e7ee      	b.n	8000498 <__libc_init_array+0xc>
 80004ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80004be:	4798      	blx	r3
 80004c0:	3601      	adds	r6, #1
 80004c2:	e7f2      	b.n	80004aa <__libc_init_array+0x1e>
 80004c4:	080004ec 	.word	0x080004ec
 80004c8:	080004ec 	.word	0x080004ec
 80004cc:	080004ec 	.word	0x080004ec
 80004d0:	080004f0 	.word	0x080004f0

080004d4 <_init>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr

080004e0 <_fini>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr
