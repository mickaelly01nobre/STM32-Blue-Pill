
Timer_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  0800045c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  0800045c  0800045c  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800045c  0800045c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000460  08000460  00001460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000464  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  08000474  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000474  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006d6  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001de  00000000  00000000  0000270f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000028f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff3c  00000000  00000000  0000299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000651  00000000  00000000  000128da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000548e7  00000000  00000000  00012f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067812  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e4  00000000  00000000  00067858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0006793c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000444 	.word	0x08000444

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000444 	.word	0x08000444

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <turnOffAllLEDs>:

/* Flag de interrupção */
volatile uint8_t timerInterruptFlag = 0;

void turnOffAllLEDs(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << 8); // Apaga LED vermelho
 80001ac:	4b0a      	ldr	r3, [pc, #40]	@ (80001d8 <turnOffAllLEDs+0x30>)
 80001ae:	68db      	ldr	r3, [r3, #12]
 80001b0:	4a09      	ldr	r2, [pc, #36]	@ (80001d8 <turnOffAllLEDs+0x30>)
 80001b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80001b6:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR &= ~(1 << 9); // Apaga LED verde
 80001b8:	4b07      	ldr	r3, [pc, #28]	@ (80001d8 <turnOffAllLEDs+0x30>)
 80001ba:	68db      	ldr	r3, [r3, #12]
 80001bc:	4a06      	ldr	r2, [pc, #24]	@ (80001d8 <turnOffAllLEDs+0x30>)
 80001be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80001c2:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR &= ~(1 << 10); // Apaga LED azul
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <turnOffAllLEDs+0x30>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	4a03      	ldr	r2, [pc, #12]	@ (80001d8 <turnOffAllLEDs+0x30>)
 80001ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80001ce:	60d3      	str	r3, [r2, #12]
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40010c00 	.word	0x40010c00

080001dc <updateLEDs>:

void updateLEDs(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
    // Verifica o estado do LED atual e atualiza a saída
    uint16_t ledOutput = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	80fb      	strh	r3, [r7, #6]
    switch (ledControl.currentLEDState)
 80001e6:	4b3c      	ldr	r3, [pc, #240]	@ (80002d8 <updateLEDs+0xfc>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b05      	cmp	r3, #5
 80001ec:	d826      	bhi.n	800023c <updateLEDs+0x60>
 80001ee:	a201      	add	r2, pc, #4	@ (adr r2, 80001f4 <updateLEDs+0x18>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	0800020d 	.word	0x0800020d
 80001f8:	08000215 	.word	0x08000215
 80001fc:	0800021d 	.word	0x0800021d
 8000200:	08000225 	.word	0x08000225
 8000204:	0800022d 	.word	0x0800022d
 8000208:	08000235 	.word	0x08000235
    {
        case LED_STATE_RED:
            ledOutput = (1 << 8); // LED vermelho
 800020c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000210:	80fb      	strh	r3, [r7, #6]
            break;
 8000212:	e016      	b.n	8000242 <updateLEDs+0x66>
        case LED_STATE_GREEN:
            ledOutput = (1 << 9); // LED verde
 8000214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000218:	80fb      	strh	r3, [r7, #6]
            break;
 800021a:	e012      	b.n	8000242 <updateLEDs+0x66>
        case LED_STATE_BLUE:
            ledOutput = (1 << 10); // LED azul
 800021c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000220:	80fb      	strh	r3, [r7, #6]
            break;
 8000222:	e00e      	b.n	8000242 <updateLEDs+0x66>
        case LED_STATE_CYAN:
            ledOutput = (1 << 9) | (1 << 10); // LED ciano (verde + azul)
 8000224:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000228:	80fb      	strh	r3, [r7, #6]
            break;
 800022a:	e00a      	b.n	8000242 <updateLEDs+0x66>
        case LED_STATE_MAGENTA:
            ledOutput = (1 << 8) | (1 << 10); // LED magenta (vermelho + azul)
 800022c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000230:	80fb      	strh	r3, [r7, #6]
            break;
 8000232:	e006      	b.n	8000242 <updateLEDs+0x66>
        case LED_STATE_YELLOW:
            ledOutput = (1 << 8) | (1 << 9); // LED amarelo (vermelho + verde)
 8000234:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000238:	80fb      	strh	r3, [r7, #6]
            break;
 800023a:	e002      	b.n	8000242 <updateLEDs+0x66>
        default:
            ledOutput = 0; // Nenhuma cor
 800023c:	2300      	movs	r3, #0
 800023e:	80fb      	strh	r3, [r7, #6]
            break;
 8000240:	bf00      	nop
    }

    if (ledControl.blinkState == 1)
 8000242:	4b25      	ldr	r3, [pc, #148]	@ (80002d8 <updateLEDs+0xfc>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d112      	bne.n	8000270 <updateLEDs+0x94>
    {
        // LED aceso
        GPIOB->ODR = ledOutput;
 800024a:	4a24      	ldr	r2, [pc, #144]	@ (80002dc <updateLEDs+0x100>)
 800024c:	88fb      	ldrh	r3, [r7, #6]
 800024e:	60d3      	str	r3, [r2, #12]
        ledControl.blinkCounter++;
 8000250:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <updateLEDs+0xfc>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	3301      	adds	r3, #1
 8000256:	4a20      	ldr	r2, [pc, #128]	@ (80002d8 <updateLEDs+0xfc>)
 8000258:	6053      	str	r3, [r2, #4]
        if (ledControl.blinkCounter >= BLINK_COUNT) // Pisca o número de vezes definido
 800025a:	4b1f      	ldr	r3, [pc, #124]	@ (80002d8 <updateLEDs+0xfc>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d936      	bls.n	80002d0 <updateLEDs+0xf4>
        {
            ledControl.blinkCounter = 0;
 8000262:	4b1d      	ldr	r3, [pc, #116]	@ (80002d8 <updateLEDs+0xfc>)
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
            ledControl.blinkState = 0; // Mudar para LED apagado
 8000268:	4b1b      	ldr	r3, [pc, #108]	@ (80002d8 <updateLEDs+0xfc>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
            {
                ledControl.blinkState = 1; // Continuar piscando a mesma cor
            }
        }
    }
}
 800026e:	e02f      	b.n	80002d0 <updateLEDs+0xf4>
        turnOffAllLEDs();
 8000270:	f7ff ff9a 	bl	80001a8 <turnOffAllLEDs>
        ledControl.blinkCounter++;
 8000274:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <updateLEDs+0xfc>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	4a17      	ldr	r2, [pc, #92]	@ (80002d8 <updateLEDs+0xfc>)
 800027c:	6053      	str	r3, [r2, #4]
        if (ledControl.blinkCounter >= BLINK_COUNT) // Pisca o número de vezes definido
 800027e:	4b16      	ldr	r3, [pc, #88]	@ (80002d8 <updateLEDs+0xfc>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d924      	bls.n	80002d0 <updateLEDs+0xf4>
            ledControl.blinkCounter = 0;
 8000286:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <updateLEDs+0xfc>)
 8000288:	2200      	movs	r2, #0
 800028a:	605a      	str	r2, [r3, #4]
            ledControl.stateChangeCounter++;
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <updateLEDs+0xfc>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	3301      	adds	r3, #1
 8000292:	4a11      	ldr	r2, [pc, #68]	@ (80002d8 <updateLEDs+0xfc>)
 8000294:	60d3      	str	r3, [r2, #12]
            if (ledControl.stateChangeCounter >= 2) // Mudar o estado após 2 piscadas (em LED apagado)
 8000296:	4b10      	ldr	r3, [pc, #64]	@ (80002d8 <updateLEDs+0xfc>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d915      	bls.n	80002ca <updateLEDs+0xee>
                ledControl.stateChangeCounter = 0;
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <updateLEDs+0xfc>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
                ledControl.currentLEDState++;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <updateLEDs+0xfc>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <updateLEDs+0xfc>)
 80002ae:	701a      	strb	r2, [r3, #0]
                if (ledControl.currentLEDState >= LED_STATE_COUNT)
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <updateLEDs+0xfc>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b05      	cmp	r3, #5
 80002b6:	d902      	bls.n	80002be <updateLEDs+0xe2>
                    ledControl.currentLEDState = LED_STATE_RED; // Volta para vermelho se passar da última cor
 80002b8:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <updateLEDs+0xfc>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
                turnOffAllLEDs();
 80002be:	f7ff ff73 	bl	80001a8 <turnOffAllLEDs>
                ledControl.blinkState = 1; // Assegura que a nova cor comece com o LED aceso
 80002c2:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <updateLEDs+0xfc>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	609a      	str	r2, [r3, #8]
}
 80002c8:	e002      	b.n	80002d0 <updateLEDs+0xf4>
                ledControl.blinkState = 1; // Continuar piscando a mesma cor
 80002ca:	4b03      	ldr	r3, [pc, #12]	@ (80002d8 <updateLEDs+0xfc>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	609a      	str	r2, [r3, #8]
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000000 	.word	0x20000000
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e8:	691b      	ldr	r3, [r3, #16]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d00a      	beq.n	8000308 <TIM2_IRQHandler+0x28>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 80002f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fc:	f023 0301 	bic.w	r3, r3, #1
 8000300:	6113      	str	r3, [r2, #16]

        // Define a flag de interrupção
        timerInterruptFlag = 1;
 8000302:	4b03      	ldr	r3, [pc, #12]	@ (8000310 <TIM2_IRQHandler+0x30>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
    }
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	2000002c 	.word	0x2000002c

08000314 <main>:

int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    // Habilita o clock para GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000318:	4b20      	ldr	r3, [pc, #128]	@ (800039c <main+0x88>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a1f      	ldr	r2, [pc, #124]	@ (800039c <main+0x88>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6193      	str	r3, [r2, #24]

    // Configura os pinos GPIOB 8, 9 e 10 como saída
    GPIOB->CRH &= 0xFFFF0000; // Limpa os bits de configuração dos pinos 8, 9 e 10
 8000324:	4b1e      	ldr	r3, [pc, #120]	@ (80003a0 <main+0x8c>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	4a1d      	ldr	r2, [pc, #116]	@ (80003a0 <main+0x8c>)
 800032a:	0c1b      	lsrs	r3, r3, #16
 800032c:	041b      	lsls	r3, r3, #16
 800032e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= 0x00002222; // Configura os pinos 8, 9 e 10 como saída push-pull, máxima velocidade de 2 MHz
 8000330:	4b1b      	ldr	r3, [pc, #108]	@ (80003a0 <main+0x8c>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a1a      	ldr	r2, [pc, #104]	@ (80003a0 <main+0x8c>)
 8000336:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800033a:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 800033e:	6053      	str	r3, [r2, #4]

    // Habilita o clock para o Timer2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000340:	4b16      	ldr	r3, [pc, #88]	@ (800039c <main+0x88>)
 8000342:	69db      	ldr	r3, [r3, #28]
 8000344:	4a15      	ldr	r2, [pc, #84]	@ (800039c <main+0x88>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	61d3      	str	r3, [r2, #28]

    // Configura o Timer2
    TIM2->PSC = 8000 - 1;  // Prescaler para 1 ms
 800034c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000350:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000354:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = BLINK_INTERVAL_MS - 1; // Período de 500 ms
 8000356:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800035e:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Habilita a interrupção de atualização (UIE) do Timer2
    TIM2->DIER |= TIM_DIER_UIE;
 8000360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	60d3      	str	r3, [r2, #12]

    // Habilita a interrupção do Timer2 no NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 8000370:	201c      	movs	r0, #28
 8000372:	f7ff fefd 	bl	8000170 <__NVIC_EnableIRQ>

    // Inicia o Timer2
    TIM2->CR1 |= TIM_CR1_CEN;
 8000376:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]

    while (1)
    {
        if (timerInterruptFlag)
 8000386:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <main+0x90>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0fa      	beq.n	8000386 <main+0x72>
        {
            // Atualiza o estado dos LEDs a cada interrupção
            updateLEDs();
 8000390:	f7ff ff24 	bl	80001dc <updateLEDs>

            // Limpa a flag de interrupção
            timerInterruptFlag = 0;
 8000394:	4b03      	ldr	r3, [pc, #12]	@ (80003a4 <main+0x90>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
        if (timerInterruptFlag)
 800039a:	e7f4      	b.n	8000386 <main+0x72>
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010c00 	.word	0x40010c00
 80003a4:	2000002c 	.word	0x2000002c

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	@ (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	@ (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	@ (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	@ (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	@ (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 f811 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff ff9b 	bl	8000314 <main>

080003de <LoopForever>:

LoopForever:
  b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80003ec:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80003f4:	20000030 	.word	0x20000030

080003f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC1_2_IRQHandler>
	...

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	2600      	movs	r6, #0
 8000400:	4d0c      	ldr	r5, [pc, #48]	@ (8000434 <__libc_init_array+0x38>)
 8000402:	4c0d      	ldr	r4, [pc, #52]	@ (8000438 <__libc_init_array+0x3c>)
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	10a4      	asrs	r4, r4, #2
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	f000 f81a 	bl	8000444 <_init>
 8000410:	2600      	movs	r6, #0
 8000412:	4d0a      	ldr	r5, [pc, #40]	@ (800043c <__libc_init_array+0x40>)
 8000414:	4c0a      	ldr	r4, [pc, #40]	@ (8000440 <__libc_init_array+0x44>)
 8000416:	1b64      	subs	r4, r4, r5
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
