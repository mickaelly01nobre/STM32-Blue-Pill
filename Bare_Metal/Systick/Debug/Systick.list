
Systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000408  08000408  00001410  2**0
                  CONTENTS
  4 .ARM          00000000  08000408  08000408  00001410  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000408  08000410  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000408  08000408  00001408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000410  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000410  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002f9  00000000  00000000  00001439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000014a  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003a  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00001912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005cf  00000000  00000000  00011842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000544e5  00000000  00000000  00011e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000662f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  0006633c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000663e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d8 	.word	0x080003d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003d8 	.word	0x080003d8

08000170 <SysTick_Handler>:

#include "stm32f1xx.h"

int SysTick_TASK = 0;
void SysTick_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	// Do stuff
	SysTick_TASK = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <SysTick_Handler+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000001c 	.word	0x2000001c

08000188 <setLEDs>:
void setLEDs(uint8_t r, uint8_t g, uint8_t b)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]
 8000192:	460b      	mov	r3, r1
 8000194:	71bb      	strb	r3, [r7, #6]
 8000196:	4613      	mov	r3, r2
 8000198:	717b      	strb	r3, [r7, #5]
    if (r) GPIOB->ODR |= (1 << 8);
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d006      	beq.n	80001ae <setLEDs+0x26>
 80001a0:	4b18      	ldr	r3, [pc, #96]	@ (8000204 <setLEDs+0x7c>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a17      	ldr	r2, [pc, #92]	@ (8000204 <setLEDs+0x7c>)
 80001a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001aa:	60d3      	str	r3, [r2, #12]
 80001ac:	e005      	b.n	80001ba <setLEDs+0x32>
    else GPIOB->ODR &= ~(1 << 8);
 80001ae:	4b15      	ldr	r3, [pc, #84]	@ (8000204 <setLEDs+0x7c>)
 80001b0:	68db      	ldr	r3, [r3, #12]
 80001b2:	4a14      	ldr	r2, [pc, #80]	@ (8000204 <setLEDs+0x7c>)
 80001b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80001b8:	60d3      	str	r3, [r2, #12]

    if (g) GPIOB->ODR |= (1 << 10);
 80001ba:	79bb      	ldrb	r3, [r7, #6]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d006      	beq.n	80001ce <setLEDs+0x46>
 80001c0:	4b10      	ldr	r3, [pc, #64]	@ (8000204 <setLEDs+0x7c>)
 80001c2:	68db      	ldr	r3, [r3, #12]
 80001c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000204 <setLEDs+0x7c>)
 80001c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ca:	60d3      	str	r3, [r2, #12]
 80001cc:	e005      	b.n	80001da <setLEDs+0x52>
    else GPIOB->ODR &= ~(1 << 10);
 80001ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000204 <setLEDs+0x7c>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000204 <setLEDs+0x7c>)
 80001d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80001d8:	60d3      	str	r3, [r2, #12]

    if (b) GPIOB->ODR |= (1 << 9);
 80001da:	797b      	ldrb	r3, [r7, #5]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d006      	beq.n	80001ee <setLEDs+0x66>
 80001e0:	4b08      	ldr	r3, [pc, #32]	@ (8000204 <setLEDs+0x7c>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4a07      	ldr	r2, [pc, #28]	@ (8000204 <setLEDs+0x7c>)
 80001e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001ea:	60d3      	str	r3, [r2, #12]
    else GPIOB->ODR &= ~(1 << 9);
}
 80001ec:	e005      	b.n	80001fa <setLEDs+0x72>
    else GPIOB->ODR &= ~(1 << 9);
 80001ee:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <setLEDs+0x7c>)
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	4a04      	ldr	r2, [pc, #16]	@ (8000204 <setLEDs+0x7c>)
 80001f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80001f8:	60d3      	str	r3, [r2, #12]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	40010c00 	.word	0x40010c00

08000208 <main>:


int main(void)
{
 8000208:	b5b0      	push	{r4, r5, r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
	 * Para habilitar o clock de cada periferico leia a secao 7.3.7.APB2 peripheral clock enable register (RCC_APB2ENR)
	 * Clock dos Perifericos
	 */

	//habilite para usa o GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 800020e:	4b45      	ldr	r3, [pc, #276]	@ (8000324 <main+0x11c>)
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	4a44      	ldr	r2, [pc, #272]	@ (8000324 <main+0x11c>)
 8000214:	f043 0308 	orr.w	r3, r3, #8
 8000218:	6193      	str	r3, [r2, #24]
		 * LED
		 *
	*/
	//LED1
	//CNF8[3:2] = 00 e MODE8[1:0] = 10
	GPIOB->CRH &= 0xFFFFFF0; // binario - 11111111111111111111111111110000
 800021a:	4b43      	ldr	r3, [pc, #268]	@ (8000328 <main+0x120>)
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	4a42      	ldr	r2, [pc, #264]	@ (8000328 <main+0x120>)
 8000220:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000224:	f023 030f 	bic.w	r3, r3, #15
 8000228:	6053      	str	r3, [r2, #4]
	//habilita o bit [1]
	GPIOB->CRH |= (1<<1);  // binario - 11111111111111111111111111110010
 800022a:	4b3f      	ldr	r3, [pc, #252]	@ (8000328 <main+0x120>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4a3e      	ldr	r2, [pc, #248]	@ (8000328 <main+0x120>)
 8000230:	f043 0302 	orr.w	r3, r3, #2
 8000234:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin8
	GPIOB->ODR &= ~(1<<8);
 8000236:	4b3c      	ldr	r3, [pc, #240]	@ (8000328 <main+0x120>)
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	4a3b      	ldr	r2, [pc, #236]	@ (8000328 <main+0x120>)
 800023c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000240:	60d3      	str	r3, [r2, #12]


	//LED2
	//CNF9[7:6] = 00 e MODE9[5:4] = 10
	GPIOB->CRH &= 0xFFFFF0F; // binario - 11111111111111111111111100001111
 8000242:	4b39      	ldr	r3, [pc, #228]	@ (8000328 <main+0x120>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a38      	ldr	r2, [pc, #224]	@ (8000328 <main+0x120>)
 8000248:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800024c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000250:	6053      	str	r3, [r2, #4]
	//habilita o bit [5]
	GPIOB->CRH |= (1<<5); // binario - 11111111111111111111111100101111
 8000252:	4b35      	ldr	r3, [pc, #212]	@ (8000328 <main+0x120>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a34      	ldr	r2, [pc, #208]	@ (8000328 <main+0x120>)
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin9
	GPIOB->ODR &= ~(1<<9);
 800025e:	4b32      	ldr	r3, [pc, #200]	@ (8000328 <main+0x120>)
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	4a31      	ldr	r2, [pc, #196]	@ (8000328 <main+0x120>)
 8000264:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000268:	60d3      	str	r3, [r2, #12]


	//LED3
	//CNF10[11:10] = 00 e MODE10[9:8] = 10
	GPIOB->CRH &= 0xFFFF0FF; // binario - 11111111111111111111000011111111
 800026a:	4b2f      	ldr	r3, [pc, #188]	@ (8000328 <main+0x120>)
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	4a2e      	ldr	r2, [pc, #184]	@ (8000328 <main+0x120>)
 8000270:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000274:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000278:	6053      	str	r3, [r2, #4]
	//habilita o bit [5]
	GPIOB->CRH |= (1<<9); // binario - 11111111111111111111001011111111
 800027a:	4b2b      	ldr	r3, [pc, #172]	@ (8000328 <main+0x120>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	4a2a      	ldr	r2, [pc, #168]	@ (8000328 <main+0x120>)
 8000280:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000284:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin10
	GPIOB->ODR &= ~(1<<10);
 8000286:	4b28      	ldr	r3, [pc, #160]	@ (8000328 <main+0x120>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a27      	ldr	r2, [pc, #156]	@ (8000328 <main+0x120>)
 800028c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000290:	60d3      	str	r3, [r2, #12]
	/*
	 * System Tick Configuration
	 * Initializes the System Timer and its interrupt, and starts the System Tick Timer.
     * Counter is in free running mode to generate periodic interrupts.
	 */
	uint32_t ticks = 8000000;
 8000292:	4b26      	ldr	r3, [pc, #152]	@ (800032c <main+0x124>)
 8000294:	61bb      	str	r3, [r7, #24]
	 * O registrador de recarga (LOAD) do SysTick tem 24 bits de largura,
	 * o que significa que o valor máximo que ele pode conter é 0xFFFFFF
	 * (16.777.215 em decimal). Portanto, verificamos se ticks - 1 é menor
	 *  ou igual a 0xFFFFFF para garantir que o valor cabe no registrador.
	 */
	if ((ticks - 1UL) <= 0xFFFFFFUL)
 8000296:	69bb      	ldr	r3, [r7, #24]
 8000298:	3b01      	subs	r3, #1
 800029a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800029e:	d209      	bcs.n	80002b4 <main+0xac>
	{
		 /* set reload register */
		SysTick->LOAD  = (uint32_t)(ticks - 1UL);
 80002a0:	4a23      	ldr	r2, [pc, #140]	@ (8000330 <main+0x128>)
 80002a2:	69bb      	ldr	r3, [r7, #24]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	6053      	str	r3, [r2, #4]

		/* set Priority for Systick Interrupt */
		//NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);

		//O registrador VAL é zerado para iniciar a contagem do SysTick a partir de zero.
		SysTick->VAL   = 0UL;			/* Load the SysTick Counter Value */
 80002a8:	4b21      	ldr	r3, [pc, #132]	@ (8000330 <main+0x128>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]


		SysTick->CTRL  = (0 << 2) |		// Enable the SysTick clock to AHB/8
 80002ae:	4b20      	ldr	r3, [pc, #128]	@ (8000330 <main+0x128>)
 80002b0:	2203      	movs	r2, #3
 80002b2:	601a      	str	r2, [r3, #0]
						 (1 << 1) |	 	// Enable interrupt SysTick (SysTick IRQ)
						 (1 << 0);		// Enables the SysTick timer
	}


    uint8_t states[8][3] = {
 80002b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <main+0x12c>)
 80002b6:	463c      	mov	r4, r7
 80002b8:	461d      	mov	r5, r3
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002c2:	e884 0003 	stmia.w	r4, {r0, r1}
        {0, 1, 1}, // Ciano
        {1, 0, 1}, // Roxo
        {1, 1, 1}  // Branco
    };

    int currentState = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61fb      	str	r3, [r7, #28]

    for(;;)
    {
        if (SysTick_TASK)
 80002ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000338 <main+0x130>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d0fb      	beq.n	80002ca <main+0xc2>
        {
            SysTick_TASK = 0;
 80002d2:	4b19      	ldr	r3, [pc, #100]	@ (8000338 <main+0x130>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]

            setLEDs(states[currentState][0], states[currentState][1], states[currentState][2]);
 80002d8:	69fa      	ldr	r2, [r7, #28]
 80002da:	4613      	mov	r3, r2
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	4413      	add	r3, r2
 80002e0:	3320      	adds	r3, #32
 80002e2:	443b      	add	r3, r7
 80002e4:	3b20      	subs	r3, #32
 80002e6:	7818      	ldrb	r0, [r3, #0]
 80002e8:	69fa      	ldr	r2, [r7, #28]
 80002ea:	4613      	mov	r3, r2
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	4413      	add	r3, r2
 80002f0:	3320      	adds	r3, #32
 80002f2:	443b      	add	r3, r7
 80002f4:	3b1f      	subs	r3, #31
 80002f6:	7819      	ldrb	r1, [r3, #0]
 80002f8:	69fa      	ldr	r2, [r7, #28]
 80002fa:	4613      	mov	r3, r2
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	4413      	add	r3, r2
 8000300:	3320      	adds	r3, #32
 8000302:	443b      	add	r3, r7
 8000304:	3b1e      	subs	r3, #30
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	461a      	mov	r2, r3
 800030a:	f7ff ff3d 	bl	8000188 <setLEDs>

            currentState = (currentState + 1) % 8;
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3301      	adds	r3, #1
 8000312:	425a      	negs	r2, r3
 8000314:	f003 0307 	and.w	r3, r3, #7
 8000318:	f002 0207 	and.w	r2, r2, #7
 800031c:	bf58      	it	pl
 800031e:	4253      	negpl	r3, r2
 8000320:	61fb      	str	r3, [r7, #28]
        if (SysTick_TASK)
 8000322:	e7d2      	b.n	80002ca <main+0xc2>
 8000324:	40021000 	.word	0x40021000
 8000328:	40010c00 	.word	0x40010c00
 800032c:	007a1200 	.word	0x007a1200
 8000330:	e000e010 	.word	0xe000e010
 8000334:	080003f0 	.word	0x080003f0
 8000338:	2000001c 	.word	0x2000001c

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	@ (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	@ (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	@ (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	@ (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	@ (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff4b 	bl	8000208 <main>

08000372 <LoopForever>:

LoopForever:
  b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	08000410 	.word	0x08000410
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	20000020 	.word	0x20000020

0800038c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC1_2_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	2600      	movs	r6, #0
 8000394:	4d0c      	ldr	r5, [pc, #48]	@ (80003c8 <__libc_init_array+0x38>)
 8000396:	4c0d      	ldr	r4, [pc, #52]	@ (80003cc <__libc_init_array+0x3c>)
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	f000 f81a 	bl	80003d8 <_init>
 80003a4:	2600      	movs	r6, #0
 80003a6:	4d0a      	ldr	r5, [pc, #40]	@ (80003d0 <__libc_init_array+0x40>)
 80003a8:	4c0a      	ldr	r4, [pc, #40]	@ (80003d4 <__libc_init_array+0x44>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	08000408 	.word	0x08000408
 80003cc:	08000408 	.word	0x08000408
 80003d0:	08000408 	.word	0x08000408
 80003d4:	0800040c 	.word	0x0800040c

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
