
BM_ADC_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0000135c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0000135c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00001358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0000135c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800035c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800035c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003da  00000000  00000000  00001385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000110  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  000018e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000064a  00000000  00000000  00011815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005452a  00000000  00000000  00011e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000054  00000000  00000000  000663cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00066420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800033c 	.word	0x0800033c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800033c 	.word	0x0800033c

08000170 <main>:
#include "stm32f1xx.h"

uint32_t adc_data;

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Configure GPIO*/

	// Set Bit 2 to enable GPIOA clock
	RCC->APB2ENR |= (1 << 2);
 8000174:	4b43      	ldr	r3, [pc, #268]	@ (8000284 <main+0x114>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a42      	ldr	r2, [pc, #264]	@ (8000284 <main+0x114>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	// Make GPIOA Pins A0 as analog input
	GPIOA->CRL &= 0x00FFFFF0;
 8000180:	4b41      	ldr	r3, [pc, #260]	@ (8000288 <main+0x118>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a40      	ldr	r2, [pc, #256]	@ (8000288 <main+0x118>)
 8000186:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800018a:	f023 030f 	bic.w	r3, r3, #15
 800018e:	6013      	str	r3, [r2, #0]

	// Set Bit 3 to enable GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 8000190:	4b3c      	ldr	r3, [pc, #240]	@ (8000284 <main+0x114>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a3b      	ldr	r2, [pc, #236]	@ (8000284 <main+0x114>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]

	// Make GPIOB Pins R6 G7 B9 as Alternate Function Output
	// Make GPIOB Pins 8 as 2MHz-Output
	GPIOB->CRL &= 0x00FFFFFF;
 800019c:	4b3b      	ldr	r3, [pc, #236]	@ (800028c <main+0x11c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a3a      	ldr	r2, [pc, #232]	@ (800028c <main+0x11c>)
 80001a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80001a6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0xBB000000;
 80001a8:	4b38      	ldr	r3, [pc, #224]	@ (800028c <main+0x11c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a37      	ldr	r2, [pc, #220]	@ (800028c <main+0x11c>)
 80001ae:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOB->CRH &= 0xFFFFFF00;
 80001b4:	4b35      	ldr	r3, [pc, #212]	@ (800028c <main+0x11c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a34      	ldr	r2, [pc, #208]	@ (800028c <main+0x11c>)
 80001ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80001be:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x000000B2;
 80001c0:	4b32      	ldr	r3, [pc, #200]	@ (800028c <main+0x11c>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a31      	ldr	r2, [pc, #196]	@ (800028c <main+0x11c>)
 80001c6:	f043 03b2 	orr.w	r3, r3, #178	@ 0xb2
 80001ca:	6053      	str	r3, [r2, #4]

	GPIOB->ODR |= 0x00000000;
 80001cc:	4b2f      	ldr	r3, [pc, #188]	@ (800028c <main+0x11c>)
 80001ce:	4a2f      	ldr	r2, [pc, #188]	@ (800028c <main+0x11c>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	60d3      	str	r3, [r2, #12]

	/*Configure ADC*/

	//Enable clock accrss to ADC1
	RCC->APB2ENR|=RCC_APB2ENR_ADC1EN;
 80001d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000284 <main+0x114>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000284 <main+0x114>)
 80001da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001de:	6193      	str	r3, [r2, #24]

	/*Set the trigger to be software mode*/
	ADC1->CR2 |= (7UL << ADC_CR2_EXTSEL_Pos);
 80001e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000290 <main+0x120>)
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000290 <main+0x120>)
 80001e6:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80001ea:	6093      	str	r3, [r2, #8]
	/*Enable Continuous mode */
	ADC1->CR2|=ADC_CR2_CONT;
 80001ec:	4b28      	ldr	r3, [pc, #160]	@ (8000290 <main+0x120>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a27      	ldr	r2, [pc, #156]	@ (8000290 <main+0x120>)
 80001f2:	f043 0302 	orr.w	r3, r3, #2
 80001f6:	6093      	str	r3, [r2, #8]
	/*Power up the adc*/
	ADC1->CR2|=ADC_CR2_ADON;
 80001f8:	4b25      	ldr	r3, [pc, #148]	@ (8000290 <main+0x120>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	4a24      	ldr	r2, [pc, #144]	@ (8000290 <main+0x120>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6093      	str	r3, [r2, #8]

	/*Configure timer4*/

	// Enable clock access to timer4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000204:	4b1f      	ldr	r3, [pc, #124]	@ (8000284 <main+0x114>)
 8000206:	69db      	ldr	r3, [r3, #28]
 8000208:	4a1e      	ldr	r2, [pc, #120]	@ (8000284 <main+0x114>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	61d3      	str	r3, [r2, #28]

	TIM4->PSC = 0;
 8000210:	4b20      	ldr	r3, [pc, #128]	@ (8000294 <main+0x124>)
 8000212:	2200      	movs	r2, #0
 8000214:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 100;
 8000216:	4b1f      	ldr	r3, [pc, #124]	@ (8000294 <main+0x124>)
 8000218:	2264      	movs	r2, #100	@ 0x64
 800021a:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM4->CCMR1 = 0x6060;
 800021c:	4b1d      	ldr	r3, [pc, #116]	@ (8000294 <main+0x124>)
 800021e:	f246 0260 	movw	r2, #24672	@ 0x6060
 8000222:	619a      	str	r2, [r3, #24]
	TIM4->CCMR2 = 0x6000;
 8000224:	4b1b      	ldr	r3, [pc, #108]	@ (8000294 <main+0x124>)
 8000226:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800022a:	61da      	str	r2, [r3, #28]
	TIM4->CCER  = 0x1011;
 800022c:	4b19      	ldr	r3, [pc, #100]	@ (8000294 <main+0x124>)
 800022e:	f241 0211 	movw	r2, #4113	@ 0x1011
 8000232:	621a      	str	r2, [r3, #32]

	TIM4->CR1  |= (1 << 0);
 8000234:	4b17      	ldr	r3, [pc, #92]	@ (8000294 <main+0x124>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a16      	ldr	r2, [pc, #88]	@ (8000294 <main+0x124>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6013      	str	r3, [r2, #0]

	/*Launch the ADC*/
	ADC1->CR2|=ADC_CR2_ADON;
 8000240:	4b13      	ldr	r3, [pc, #76]	@ (8000290 <main+0x120>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a12      	ldr	r2, [pc, #72]	@ (8000290 <main+0x120>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6093      	str	r3, [r2, #8]
	/*Launch the ADC conversion*/
	ADC1->CR2 |= ADC_CR2_SWSTART;
 800024c:	4b10      	ldr	r3, [pc, #64]	@ (8000290 <main+0x120>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a0f      	ldr	r2, [pc, #60]	@ (8000290 <main+0x120>)
 8000252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000256:	6093      	str	r3, [r2, #8]

	while(1)
	{
		/*wait for EOC*/
		while(!(ADC1->SR &ADC_SR_EOC));
 8000258:	bf00      	nop
 800025a:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <main+0x120>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f003 0302 	and.w	r3, r3, #2
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <main+0xea>

		adc_data = ADC1->DR;
 8000266:	4b0a      	ldr	r3, [pc, #40]	@ (8000290 <main+0x120>)
 8000268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026a:	4a0b      	ldr	r2, [pc, #44]	@ (8000298 <main+0x128>)
 800026c:	6013      	str	r3, [r2, #0]

		TIM4->CCR1 = adc_data / 42;
 800026e:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <main+0x128>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a08      	ldr	r2, [pc, #32]	@ (8000294 <main+0x124>)
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	4909      	ldr	r1, [pc, #36]	@ (800029c <main+0x12c>)
 8000278:	fba1 1303 	umull	r1, r3, r1, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	6353      	str	r3, [r2, #52]	@ 0x34
		while(!(ADC1->SR &ADC_SR_EOC));
 8000280:	e7ea      	b.n	8000258 <main+0xe8>
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000
 8000288:	40010800 	.word	0x40010800
 800028c:	40010c00 	.word	0x40010c00
 8000290:	40012400 	.word	0x40012400
 8000294:	40000800 	.word	0x40000800
 8000298:	2000001c 	.word	0x2000001c
 800029c:	30c30c31 	.word	0x30c30c31

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	@ (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	@ (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	@ (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff4d 	bl	8000170 <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	20000020 	.word	0x20000020

080002f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_2_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	2600      	movs	r6, #0
 80002f8:	4d0c      	ldr	r5, [pc, #48]	@ (800032c <__libc_init_array+0x38>)
 80002fa:	4c0d      	ldr	r4, [pc, #52]	@ (8000330 <__libc_init_array+0x3c>)
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	f000 f81a 	bl	800033c <_init>
 8000308:	2600      	movs	r6, #0
 800030a:	4d0a      	ldr	r5, [pc, #40]	@ (8000334 <__libc_init_array+0x40>)
 800030c:	4c0a      	ldr	r4, [pc, #40]	@ (8000338 <__libc_init_array+0x44>)
 800030e:	1b64      	subs	r4, r4, r5
 8000310:	10a4      	asrs	r4, r4, #2
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
