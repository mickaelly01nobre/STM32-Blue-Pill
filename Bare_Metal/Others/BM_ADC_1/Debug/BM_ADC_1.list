
BM_ADC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  4 .ARM          00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000350  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000350  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010379  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003cd  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000fe  00000000  00000000  00010789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff24  00000000  00000000  000108fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000558  00000000  00000000  00020821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000544e4  00000000  00000000  00020d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000054  00000000  00000000  00075260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000752b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000330 	.word	0x08000330

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000330 	.word	0x08000330

08000170 <main>:
#include "stm32f1xx.h"

uint32_t adc_data;

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Configure GPIO*/

	// Set Bit 2 to enable GPIOA clock
	RCC->APB2ENR |= (1 << 2);
 8000174:	4b40      	ldr	r3, [pc, #256]	; (8000278 <main+0x108>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a3f      	ldr	r2, [pc, #252]	; (8000278 <main+0x108>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	// Make GPIOA Pins A0 as analog input
	GPIOA->CRL &= 0x00FFFFF0;
 8000180:	4b3e      	ldr	r3, [pc, #248]	; (800027c <main+0x10c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a3d      	ldr	r2, [pc, #244]	; (800027c <main+0x10c>)
 8000186:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800018a:	f023 030f 	bic.w	r3, r3, #15
 800018e:	6013      	str	r3, [r2, #0]

	// Set Bit 3 to enable GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 8000190:	4b39      	ldr	r3, [pc, #228]	; (8000278 <main+0x108>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a38      	ldr	r2, [pc, #224]	; (8000278 <main+0x108>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]

	// Make GPIOB Pins R6 G7 B9 as Alternate Function Output
	// Make GPIOB Pins 8 as 2MHz-Output
	GPIOB->CRL &= 0x00FFFFFF;
 800019c:	4b38      	ldr	r3, [pc, #224]	; (8000280 <main+0x110>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a37      	ldr	r2, [pc, #220]	; (8000280 <main+0x110>)
 80001a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80001a6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0xBB000000;
 80001a8:	4b35      	ldr	r3, [pc, #212]	; (8000280 <main+0x110>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a34      	ldr	r2, [pc, #208]	; (8000280 <main+0x110>)
 80001ae:	f043 433b 	orr.w	r3, r3, #3137339392	; 0xbb000000
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOB->CRH &= 0xFFFFFF00;
 80001b4:	4b32      	ldr	r3, [pc, #200]	; (8000280 <main+0x110>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a31      	ldr	r2, [pc, #196]	; (8000280 <main+0x110>)
 80001ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001be:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x000000B2;
 80001c0:	4b2f      	ldr	r3, [pc, #188]	; (8000280 <main+0x110>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a2e      	ldr	r2, [pc, #184]	; (8000280 <main+0x110>)
 80001c6:	f043 03b2 	orr.w	r3, r3, #178	; 0xb2
 80001ca:	6053      	str	r3, [r2, #4]

	GPIOB->ODR |= 0x00000000;
 80001cc:	4b2c      	ldr	r3, [pc, #176]	; (8000280 <main+0x110>)
 80001ce:	4a2c      	ldr	r2, [pc, #176]	; (8000280 <main+0x110>)
 80001d0:	68db      	ldr	r3, [r3, #12]
 80001d2:	60d3      	str	r3, [r2, #12]

	/*Configure ADC*/

	//Enable clock accrss to ADC1
	RCC->APB2ENR|=RCC_APB2ENR_ADC1EN;
 80001d4:	4b28      	ldr	r3, [pc, #160]	; (8000278 <main+0x108>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a27      	ldr	r2, [pc, #156]	; (8000278 <main+0x108>)
 80001da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001de:	6193      	str	r3, [r2, #24]

	/*Set the trigger to be software mode*/
	ADC1->CR2 |= (7UL << ADC_CR2_EXTSEL_Pos);
 80001e0:	4b28      	ldr	r3, [pc, #160]	; (8000284 <main+0x114>)
 80001e2:	689b      	ldr	r3, [r3, #8]
 80001e4:	4a27      	ldr	r2, [pc, #156]	; (8000284 <main+0x114>)
 80001e6:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80001ea:	6093      	str	r3, [r2, #8]
	/*Power up the adc*/
	ADC1->CR2|=ADC_CR2_ADON;
 80001ec:	4b25      	ldr	r3, [pc, #148]	; (8000284 <main+0x114>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a24      	ldr	r2, [pc, #144]	; (8000284 <main+0x114>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6093      	str	r3, [r2, #8]

	/*Configure timer4*/

	// Enable clock access to timer4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80001f8:	4b1f      	ldr	r3, [pc, #124]	; (8000278 <main+0x108>)
 80001fa:	69db      	ldr	r3, [r3, #28]
 80001fc:	4a1e      	ldr	r2, [pc, #120]	; (8000278 <main+0x108>)
 80001fe:	f043 0304 	orr.w	r3, r3, #4
 8000202:	61d3      	str	r3, [r2, #28]

	TIM4->PSC = 0;
 8000204:	4b20      	ldr	r3, [pc, #128]	; (8000288 <main+0x118>)
 8000206:	2200      	movs	r2, #0
 8000208:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 100;
 800020a:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <main+0x118>)
 800020c:	2264      	movs	r2, #100	; 0x64
 800020e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM4->CCMR1 = 0x6060;
 8000210:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <main+0x118>)
 8000212:	f246 0260 	movw	r2, #24672	; 0x6060
 8000216:	619a      	str	r2, [r3, #24]
	TIM4->CCMR2 = 0x6000;
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <main+0x118>)
 800021a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800021e:	61da      	str	r2, [r3, #28]
	TIM4->CCER  = 0x1011;
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <main+0x118>)
 8000222:	f241 0211 	movw	r2, #4113	; 0x1011
 8000226:	621a      	str	r2, [r3, #32]

	TIM4->CR1  |= (1 << 0);
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <main+0x118>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <main+0x118>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]

	while(1)
	{
		/*Relaunch the ADC*/
		ADC1->CR2 |= ADC_CR2_ADON;
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <main+0x114>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a12      	ldr	r2, [pc, #72]	; (8000284 <main+0x114>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6093      	str	r3, [r2, #8]
		/*Launch the ADC conversion*/
		ADC1->CR2 |= ADC_CR2_SWSTART;
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <main+0x114>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <main+0x114>)
 8000246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800024a:	6093      	str	r3, [r2, #8]

		/*wait for EOC*/
		while(!(ADC1->SR &ADC_SR_EOC));
 800024c:	bf00      	nop
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <main+0x114>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f003 0302 	and.w	r3, r3, #2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f9      	beq.n	800024e <main+0xde>

		adc_data = ADC1->DR;
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <main+0x114>)
 800025c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025e:	4a0b      	ldr	r2, [pc, #44]	; (800028c <main+0x11c>)
 8000260:	6013      	str	r3, [r2, #0]

		TIM4->CCR1 = adc_data / 42;
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <main+0x11c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a08      	ldr	r2, [pc, #32]	; (8000288 <main+0x118>)
 8000268:	085b      	lsrs	r3, r3, #1
 800026a:	4909      	ldr	r1, [pc, #36]	; (8000290 <main+0x120>)
 800026c:	fba1 1303 	umull	r1, r3, r1, r3
 8000270:	089b      	lsrs	r3, r3, #2
 8000272:	6353      	str	r3, [r2, #52]	; 0x34
		ADC1->CR2 |= ADC_CR2_ADON;
 8000274:	e7de      	b.n	8000234 <main+0xc4>
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	40010800 	.word	0x40010800
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40012400 	.word	0x40012400
 8000288:	40000800 	.word	0x40000800
 800028c:	2000001c 	.word	0x2000001c
 8000290:	30c30c31 	.word	0x30c30c31

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 f811 	bl	80002e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ff53 	bl	8000170 <main>

080002ca <LoopForever>:

LoopForever:
  b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	20000020 	.word	0x20000020

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>
	...

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2600      	movs	r6, #0
 80002ec:	4d0c      	ldr	r5, [pc, #48]	; (8000320 <__libc_init_array+0x38>)
 80002ee:	4c0d      	ldr	r4, [pc, #52]	; (8000324 <__libc_init_array+0x3c>)
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	f000 f81a 	bl	8000330 <_init>
 80002fc:	2600      	movs	r6, #0
 80002fe:	4d0a      	ldr	r5, [pc, #40]	; (8000328 <__libc_init_array+0x40>)
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <__libc_init_array+0x44>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	42a6      	cmp	r6, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000310:	4798      	blx	r3
 8000312:	3601      	adds	r6, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f855 3b04 	ldr.w	r3, [r5], #4
 800031a:	4798      	blx	r3
 800031c:	3601      	adds	r6, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr
