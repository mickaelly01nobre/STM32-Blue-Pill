
BM_TIM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  4 .ARM          00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000324  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000324  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001034d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005d6  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000167  00000000  00000000  00010966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00010ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff24  00000000  00000000  00010b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000560  00000000  00000000  00020a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054777  00000000  00000000  00020fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000a0  00000000  00000000  0007575c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000757fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000304 	.word	0x08000304

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000304 	.word	0x08000304

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <TIM2_IRQHandler>:

/*
 * TIM2interrupt handler
 */
void TIM2_IRQHandler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF)
 80001ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001b0:	691b      	ldr	r3, [r3, #16]
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d00d      	beq.n	80001d6 <TIM2_IRQHandler+0x2e>
	{
		GPIOB->ODR ^= (1 << 11);
 80001ba:	4b09      	ldr	r3, [pc, #36]	; (80001e0 <TIM2_IRQHandler+0x38>)
 80001bc:	68db      	ldr	r3, [r3, #12]
 80001be:	4a08      	ldr	r2, [pc, #32]	; (80001e0 <TIM2_IRQHandler+0x38>)
 80001c0:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 80001c4:	60d3      	str	r3, [r2, #12]

		TIM2->SR &=~TIM_SR_UIF;
 80001c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ca:	691b      	ldr	r3, [r3, #16]
 80001cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001d0:	f023 0301 	bic.w	r3, r3, #1
 80001d4:	6113      	str	r3, [r2, #16]
	}

}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <main>:

int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	// Set Bit 3 to enable GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 80001e8:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <main+0x7c>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <main+0x7c>)
 80001ee:	f043 0308 	orr.w	r3, r3, #8
 80001f2:	6193      	str	r3, [r2, #24]

	// Make GPIOB Pin11 output
	GPIOB->CRH &= 0xFFFF0FFF;
 80001f4:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <main+0x80>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <main+0x80>)
 80001fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80001fe:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x00002000;
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <main+0x80>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <main+0x80>)
 8000206:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020a:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin11
	GPIOB->ODR &= ~(1 << 11);
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <main+0x80>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	4a14      	ldr	r2, [pc, #80]	; (8000264 <main+0x80>)
 8000212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000216:	60d3      	str	r3, [r2, #12]

	// Enable clock access to timer2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <main+0x7c>)
 800021a:	69db      	ldr	r3, [r3, #28]
 800021c:	4a10      	ldr	r2, [pc, #64]	; (8000260 <main+0x7c>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	61d3      	str	r3, [r2, #28]

	// Configure timer2
	TIM2->PSC = 8000-1; 	//8000000/8000 =1000 i.e. 1ms
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000-1; 	//count up to 1000 which is 1 second
 800022e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000232:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000236:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set UIE(Update interrupt enable) bit
	 * in TIMx DMA/Interrupt enable register (TIMx_DIER)
	 * to enable timer interrupt*/
	TIM2->DIER |= TIM_DIER_UIE;
 8000238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	60d3      	str	r3, [r2, #12]

	// Enable timer2 interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000248:	201c      	movs	r0, #28
 800024a:	f7ff ff91 	bl	8000170 <__NVIC_EnableIRQ>

	// Enable the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 800024e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	6013      	str	r3, [r2, #0]

	while(1)
 800025e:	e7fe      	b.n	800025e <main+0x7a>
 8000260:	40021000 	.word	0x40021000
 8000264:	40010c00 	.word	0x40010c00

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800026c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ffa3 	bl	80001e4 <main>

0800029e <LoopForever>:

LoopForever:
  b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ac:	08000324 	.word	0x08000324
  ldr r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC1_2_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	2600      	movs	r6, #0
 80002c0:	4d0c      	ldr	r5, [pc, #48]	; (80002f4 <__libc_init_array+0x38>)
 80002c2:	4c0d      	ldr	r4, [pc, #52]	; (80002f8 <__libc_init_array+0x3c>)
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	10a4      	asrs	r4, r4, #2
 80002c8:	42a6      	cmp	r6, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	f000 f81a 	bl	8000304 <_init>
 80002d0:	2600      	movs	r6, #0
 80002d2:	4d0a      	ldr	r5, [pc, #40]	; (80002fc <__libc_init_array+0x40>)
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <__libc_init_array+0x44>)
 80002d6:	1b64      	subs	r4, r4, r5
 80002d8:	10a4      	asrs	r4, r4, #2
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e4:	4798      	blx	r3
 80002e6:	3601      	adds	r6, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ee:	4798      	blx	r3
 80002f0:	3601      	adds	r6, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
