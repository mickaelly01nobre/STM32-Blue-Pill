
BM_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007b4  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000196  00000000  00000000  00010bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00010dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff24  00000000  00000000  00010e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005c5  00000000  00000000  00020d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054829  00000000  00000000  000212ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000e8  00000000  00000000  00075b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00075c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800037c 	.word	0x0800037c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800037c 	.word	0x0800037c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	; (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <main>:
	// Clear pending
	EXTI->PR = (1 << 1);
}

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	// Set Bit 5 to enable GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 8000200:	4b32      	ldr	r3, [pc, #200]	; (80002cc <main+0xd0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a31      	ldr	r2, [pc, #196]	; (80002cc <main+0xd0>)
 8000206:	f043 0308 	orr.w	r3, r3, #8
 800020a:	6193      	str	r3, [r2, #24]
	// Set Bit 6 to enable GPIOC clock
	RCC->APB2ENR |= (1 << 4);
 800020c:	4b2f      	ldr	r3, [pc, #188]	; (80002cc <main+0xd0>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a2e      	ldr	r2, [pc, #184]	; (80002cc <main+0xd0>)
 8000212:	f043 0310 	orr.w	r3, r3, #16
 8000216:	6193      	str	r3, [r2, #24]

	// Make GPIOB Pin0 and Pin1 input
	GPIOB->CRL &= 0xFFFFFF00;
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <main+0xd4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <main+0xd4>)
 800021e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000222:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x00000088;
 8000224:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <main+0xd4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a29      	ldr	r2, [pc, #164]	; (80002d0 <main+0xd4>)
 800022a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800022e:	6013      	str	r3, [r2, #0]

	// Make GPIOE Pin13 output
	GPIOC->CRH &= 0xFF0FFFFF;
 8000230:	4b28      	ldr	r3, [pc, #160]	; (80002d4 <main+0xd8>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	4a27      	ldr	r2, [pc, #156]	; (80002d4 <main+0xd8>)
 8000236:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800023a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x00200000;
 800023c:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <main+0xd8>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a24      	ldr	r2, [pc, #144]	; (80002d4 <main+0xd8>)
 8000242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000246:	6053      	str	r3, [r2, #4]

	// Reset GPIOC Pin13
	GPIOC->ODR &= ~(1 << 13);
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <main+0xd8>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4a21      	ldr	r2, [pc, #132]	; (80002d4 <main+0xd8>)
 800024e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000252:	60d3      	str	r3, [r2, #12]

	// Since we will use Alternate Function (EXTI) we need to enable the
	//   clock for that module. Bit0 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 0); // AFIO Clock enable
 8000254:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <main+0xd0>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <main+0xd0>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6193      	str	r3, [r2, #24]
	// EXTI0 can be configured for each GPIO module.
	//   EXTICR1: 0b XXXX XXXX XXXX 0001
	//               pin3 pin2 pin1 pin0
	//
	//   Writing a 0b0001 to pin0 location ties PB0 to EXT0
	AFIO->EXTICR[1] |= 0x0001; // Tie PB0 to EXTI0
 8000260:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <main+0xdc>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	4a1c      	ldr	r2, [pc, #112]	; (80002d8 <main+0xdc>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	60d3      	str	r3, [r2, #12]
	// EXTI1 can be configured for each GPIO module.
	//   EXTICR1: 0b XXXX XXXX 0001 XXXX
	//               pin3 pin2 pin1 pin0
	//
	//   Writing a 0b0001 to pin1 location ties PB1 to EXT1
	AFIO->EXTICR[1] |= 0x0010; // Tie PD1 to EXTI1
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <main+0xdc>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <main+0xdc>)
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	60d3      	str	r3, [r2, #12]

	// Next we choose either falling edge trigger (FTSR) or falling edge trigger (FTSR)
	EXTI->FTSR |= 0x00001;   // Enable falling edge trigger on EXTI0
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <main+0xe0>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <main+0xe0>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= 0x00002;   // Enable falling edge trigger on EXTI1
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <main+0xe0>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <main+0xe0>)
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	60d3      	str	r3, [r2, #12]

	// We mask the used external interrupt numbers.
	EXTI->IMR |= 0x00001;    // Mask EXTI0
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <main+0xe0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <main+0xe0>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= 0x00002;    // Mask EXTI1
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <main+0xe0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <main+0xe0>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]

	// Set Prioirity for each interrupt request
	// STM32F103 supports 4-bit priority level (highest 4-bits are implemented)
	NVIC_SetPriority(EXTI0_IRQn,0x10); // Priority level 1
 80002a8:	2110      	movs	r1, #16
 80002aa:	2006      	movs	r0, #6
 80002ac:	f7ff ff7c 	bl	80001a8 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI1_IRQn,0x20); // Priority level 2
 80002b0:	2120      	movs	r1, #32
 80002b2:	2007      	movs	r0, #7
 80002b4:	f7ff ff78 	bl	80001a8 <__NVIC_SetPriority>
	//  for EXTI0 we write ISER[0] = (1 << 6);
	//  for TIM5 we write ISER[1] = (1 << 18);
	// The enable_interrupt function does that automatically. Just pass the interrupt number to be enabled.

	// Enable EXTI0 interrupt on NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
 80002b8:	2006      	movs	r0, #6
 80002ba:	f7ff ff59 	bl	8000170 <__NVIC_EnableIRQ>
	// Enable EXTI1 interrupt on NVIC
	NVIC_EnableIRQ(EXTI1_IRQn);
 80002be:	2007      	movs	r0, #7
 80002c0:	f7ff ff56 	bl	8000170 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002c4:	b662      	cpsie	i
}
 80002c6:	bf00      	nop

	__enable_irq();

	while(1)
 80002c8:	e7fe      	b.n	80002c8 <main+0xcc>
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40011000 	.word	0x40011000
 80002d8:	40010000 	.word	0x40010000
 80002dc:	40010400 	.word	0x40010400

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ff73 	bl	80001fc <main>

08000316 <LoopForever>:

LoopForever:
  b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	2600      	movs	r6, #0
 8000338:	4d0c      	ldr	r5, [pc, #48]	; (800036c <__libc_init_array+0x38>)
 800033a:	4c0d      	ldr	r4, [pc, #52]	; (8000370 <__libc_init_array+0x3c>)
 800033c:	1b64      	subs	r4, r4, r5
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	42a6      	cmp	r6, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	f000 f81a 	bl	800037c <_init>
 8000348:	2600      	movs	r6, #0
 800034a:	4d0a      	ldr	r5, [pc, #40]	; (8000374 <__libc_init_array+0x40>)
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <__libc_init_array+0x44>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	42a6      	cmp	r6, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f855 3b04 	ldr.w	r3, [r5], #4
 800035c:	4798      	blx	r3
 800035e:	3601      	adds	r6, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f855 3b04 	ldr.w	r3, [r5], #4
 8000366:	4798      	blx	r3
 8000368:	3601      	adds	r6, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr
